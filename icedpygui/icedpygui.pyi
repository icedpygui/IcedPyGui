from typing import Any, Callable, Dict, List, OrderedDict, Optional, Tuple, Union


class IPG:
    """
    Main class that is instantiated and that calls the corresponding rust file to implement the widgets
    """
    def __init__(self) -> None:
        ...

    def start_session(self) -> None:
        """
        Starts the gui session.  Must be the last called.

        Returns
        -------
        None
        """

    def generate_id(self) -> int:
        """
        Generates an id for some future widget

        Returns
        -------
        id: int
            Pre-generated id to use for a widget with parameter gen_id.
        """

    def add_window(self,
                    window_id: str,
                    title: str,
                    width: float,
                    height: float,
                    max_width: Optional[float],
                    max_height: Optional[float],
                    min_width: Optional[float],
                    min_height: Optional[float],
                    pos_x: Optional[float]=None,
                    pos_y: Optional[float]=None,
                    pos_centered: bool=False,
                    resizable: bool=True,
                    decorations: bool=True,
                    transparent: bool=False,
                    level: IpgWindowLevel = IpgWindowLevel.Normal,
                    theme: IpgWindowTheme=IpgWindowTheme.Dark,
                    debug: bool=False,
                    exit_on_close: bool=True,
                    mode: IpgWindowMode=IpgWindowMode.Windowed,
                    gen_id: Optional[int]=None,
                    ) -> int:
        """
        Adds a window to the gui.

        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            title: str
                Sets the title placed in the top bar of the window.
            width: int
                Sets the width of the window.
            height: int
                Sets the height of the window.
            max_width: Optional[float],
                Sets the maximum width of the window.
            max_height: Optional[float],
                Sets the maximum height of the window.
            min_width: Optional[float],
                Sets the minimum width of the window.
            min_height: Optional[float],
                Sets the minimum height of the window.
            pos_x: float
                Sets the x position of window.  The window position will be defaulted to 
                a system default unless position is set.
            pos_y: float
                Sets the y position of window.  The window position will be defaulted to 
                a system default unless position is set.
            pos_centered: bool
                Sets the position of window to be centered.
            resizable: bool
                Sets whether the window can be resized.
            decorations: bool=True,
                Whether the window should have a border, a title bar, etc. or not.
            transparent: bool=False
                Whether the window should be transparent.
            level: IpgWindowLevel.Normal
                Whether the window should be Normal, AlwaysOnBottom, AlwaysOnTop
            theme: IpgWindowThemes
                Sets the style of the window.
            mode: IpgWindowMode
                Sets the window mode, Windowed(default), FullScreen, Hidden.
            debug: bool
                If set, draws a box around widgets to see the layout.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
        
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_canvas(self,
                    window_id: str,
                    canvas_id: str,
                    width: Optional[float]=None,
                    width_fill: bool=False,
                    height: Optional[float]=None,
                    height_fill: bool=False,
                    parent_id: Optional[str]=None,
                    gen_id: Optional[int]=None,
                    border_show: bool=True,
                    border_color: Optional[IpgColor]=None,
                    border_width: float=2.0,
                    background: Optional[IpgColor]=None,
                    show: bool=True,
                    )  -> int:
        """
        Add a canvas for drawing.
        """ 

    def add_container(self,
                        window_id: str,
                        container_id: str,
                        *,
                        parent_id: Optional[str]=None,
                        width: Optional[float]=None,
                        height: Optional[float]=None,
                        width_fill: bool=False,
                        height_fill: bool=False,
                        max_height: float=float('inf'),
                        max_width: float=float('inf'),
                        horizontal_alignment: Optional[IpgAlignment]=None,
                        vertical_alignment: Optional[IpgAlignment]=None,
                        padding: list[float]=[10.0],
                        clip: bool=False,
                        show: bool=True,
                        style_id: Optional[str]=None,
                        style_standard: Optional[IpgStyleStandard]=None
                        ) -> int:
        """
        Adds a generic container to the gui
        Note: A container unlike a row or column can only have 1 child.
            The container is used to help with widget alignments.
            You can align 1 widget or many if you add a row or column to the
            container and use the horizontal and vertical alignments.

        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the container.
            parent_id: str
                If parent_id == window_id then not required, 
                If another container then required.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            max_width: float
                Sets the maximum width the container is allowed to be.
            max_height: float
                Sets a maximum height the container is allowed to be.
            horizontal_alignment: IpgHorizontalAlignment
                Aligns the container horizontally; Start, Center=default, End
            vertical_alignment: IpgVerticalAlignment
                Aligns the container vertically; Start, Center=default, End
            padding: List[float]
                Sets the padding for container.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            clip: bool
                Whether to clip any text if size > container.
            show: bool
                Shows or hides container and all of its contents.
            style_id: str
                style_id of the add_container_style.
            style_Standard: IpgStyleStandard
                IpgStyleStandard class.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.

        """

    def add_container_style(self,
                            style_id: str, 
                            *,
                            background_color: Optional[IpgColor]=None,
                            background_rgba: Optional[list[float, 4]]=None,
                            border_color: Optional[IpgColor]=None, 
                            border_rgba: Optional[list[float, 4]]=None,
                            border_radius: list[float]=[0.0], 
                            border_width: float=1.0,
                            shadow_color: Optional[IpgColor]=None, 
                            shadow_rgba: Optional[list]=None,
                            shadow_offset_x: float=0.0, 
                            shadow_offset_y: float=0.0,
                            shadow_blur_radius: float=1.0,
                            text_color: Optional[IpgColor]=None, 
                            text_rgba: Optional[list[float, 4]]=None,
                        ) -> int:
        """
        Adds styling to container

        Parameters
        ----------
            style_id: str
                Id of container_style. 
            background_color: IpgColor]
                The Color::TRANSPARENT is used unless defined.
            background_rgba: list,
                The color in rgba format [float; 4] used as state above.
            border_color: IpgColor
                Color used for the border.
            border_rgba: list
                The color in rgba format [float; 4] used as state above.
            border_radius: list
                The radius of the 4 corners, [float]=all corners, 
                [float;4] top-left, top-right, bottom-right, bottom-left.
            border_width: float
                Border width.
            shadow_color: IpgColor
                The color of the shadow.
            shadow_rgba: list
                The color in rgba format [float; 4] used as state above.
            shadow_offset_x: float
                Shadow offset in the horizontal direction.
            shadow_offset_y: float
                Shadow offset in the vertical direction.
            shadow_blur_radius: float
                The blur radius of the shadow.
            text_color: IpgColor
                The text color, if not defined, will either be a Black or White variation based on theme background.
            text_rgba: list]
                The color in rgba format [float; 4] used as state above.
        """

    def add_column(self,
                    window_id: str,
                    container_id: str,
                    *,
                    parent_id: Optional[str]=None,
                    align_items: IpgAlignment=IpgAlignment.Start,
                    width: Optional[float]=None,
                    height: Optional[float]=None,
                    width_fill: bool=False,
                    height_fill: bool=False,
                    max_width: float=float('inf'),
                    padding: list=[10.0], 
                    spacing: float=20.0,
                    clip: bool=False,
                    show: bool=True,
                    ) -> int:

        """ 
        Adds a Column which is a container that distributes its contents vertically
        
        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the container.
            parent_id: str
                If parent_id == window_id then not required, 
                If another container then required.
            align_items: IpgAlignment
                Sets the vertical alignment of the items in the column; Start, Center, End.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            max_width: float
                Sets the maximum width the container is allowed to be.
            padding: List[float]
                Sets the padding for container.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            spacing: float
                Sets the spacing between items in column.
            clip: bool
                Whether to clip any text if size > container.
            show: bool
                Shows or hides widget.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    # def add_modal(self,
    #                 window_id: str,
    #                 container_id: str,
    #                 label: str,
    #                 *,
    #                 parent_id: Optional[str]=None,
    #                 on_open: Optional[Callable]=None,
    #                 align_items: IpgAlignment=IpgAlignment.Start,
    #                 width: Optional[float]=None,
    #                 height: Optional[float]=None,
    #                 width_fill: bool=False,
    #                 height_fill: bool=False,
    #                 max_width: float=float('inf'),
    #                 padding: List=[10.0], 
    #                 spacing: float=20.0,
    #                 clip: bool=False,
    #                 show: bool=True,
    #                 ) -> int:

    #     """ 
    #     Adds a Column which is a container that distributes its contents vertically
        
    #     Parameters
    #     ----------
    #         window_id: str
    #             Id of the window to place container in.
    #         container_id: str
    #             The id of the container.
    #         label: str
    #             Label for the button to open the modal.
    #         parent_id: str
    #             If parent_id == window_id then not required, 
    #             If another container then required.
    #         on_open: Optional[Callable]=None

    #         align_items: IpgColumnAlignment
    #             Sets the vertical alignment of the items in the column; Start, Center, End.
    #         width: float
    #             Sets the width of the widget.
    #         width_fill: bool
    #             Sets the width to fill the available space, overrides width.
    #         height: float
    #             Sets the height of the widget.   
    #         height_fill: bool
    #             Sets the height to fill the available space, overrides height.
    #         max_width: float
    #             Sets the maximum width the container is allowed to be.
    #         padding: List[float]
    #             Sets the padding for container.
    #             use [float] for all sides,
    #             use [float, float] for [top&bottom, left&right]
    #             use [float, float, float, float] for [top, right, bottom, left]
    #         spacing: float
    #             Sets the spacing between items in column.
    #         clip: bool
    #             Whether to clip any text if size > container.
    #         show: bool
    #             Shows or hides widget.
            
    #     Returns
    #     -------
    #     id: int
    #         Internal id of widget and can be used by user if equated.
    #     """

    def add_mousearea(self,
                        window_id: str,
                        container_id: str,
                        *,
                        parent_id: Optional[str]=None,
                        gen_id: Optional[int]=None,
                        on_press: Optional[Callable]=None, 
                        on_release: Optional[Callable]=None, 
                        on_right_press: Optional[Callable]=None, 
                        on_right_release: Optional[Callable]=None, 
                        on_middle_press: Optional[Callable]=None, 
                        on_middle_release: Optional[Callable]=None,
                        on_enter: Optional[Callable]=None,
                        on_move: Optional[Callable]=None,
                        on_exit: Optional[Callable]=None,
                        mouse_pointer: Optional[IpgMousePointer]=None,
                        show: bool=True,  
                        user_data: Optional[any]=None,
                      ) -> int:
        """
        Adds a mouse area where the mouse actions have a callback.  
        The mouse area is like a container, you can add one or more items
        into the area, either widgets, containers, or containers with widgets.  
        The mouse area will assume the size of the items or items
        you add.  Typically you'll probably only add one item but you could do
        more, if needed.

        Parameters
        ----------
            window_id: str

            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the container.
            parent_id: str
                If parent_id == window_id then not required,
                If another container then required.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_press: Callable
                Function to call for left mouse button pressed. 
            on_release: Callable
                Function to call for left mouse button released. 
            on_right_press: Callable
                Function to call for right mouse button pressed. 
            on_right_release: Callable
                Function to call for right mouse button released.  
            on_middle_press: Callable
                Function to call for middle mouse button pressed. 
            on_middle_release: Callable
                Function to call for middle mouse button released.
            on_enter: Callable
                Function to call for mouse enters in text area.
            on_move: Callable
                Function to call for mouse moves in text area.
            on_exit: Callable
                Function to call for mouse exits text area.
            mouse_pointer: Optional[IpgMousePointer]
                How the mouse pointer appears when over the mouse area.
            show: bool
                To show the widget or not.
            user_data: any
                Any data that might be needed in the callback function.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_opaque_container(self,
                            window_id: str,
                            container_id: str,
                            *,
                            parent_id: Optional[str],
                            width: Optional[float],
                            height: Optional[float],
                            width_fill: bool,
                            height_fill: bool,
                            mouse_on_press: Optional[Callable]=None,
                            show: bool,
                            style_id: Optional[str],
                            ) -> int:
        """
        Adds an opaque container, usually used in the stack widget to hide items.
        """

    def add_row(self,
                window_id: str,
                container_id: str,
                *,
                parent_id: Optional[str]=None,
                align_items: IpgAlignment=IpgAlignment.Start,
                width: Optional[float]=None,
                height: Optional[float]=None,
                width_fill: bool=False,
                height_fill: bool=False,
                padding: List=[10.0], 
                spacing: float=20.0,
                clip: bool=False,
                show: bool=True,
                ) -> int:

        """
        Adds a row container to the gui.  Aligns widget horizontally.
        
        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the container.
            parent_id: str
                If parent_id == window_id then not required, 
                If another container then required.
            align_items: IpgRowAlignment
                Sets the alignment Start, Center, or End.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            padding: List[float]
                Sets the padding for container.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            spacing: float
                Sets the spacing between items in row.
            clip: bool
                Whether to clip the content or not.
            show: bool
                Shows or hides widget.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_stack(self,
                window_id: str,
                container_id: str,
                *,
                parent_id: Optional[str]=None,
                width: Optional[float]=None,
                height: Optional[float]=None,
                width_fill: bool=False,
                height_fill: bool=False,
                hide_index: Optional[int],
                show: bool=True,
                ) -> int:

        """
        Adds a stack of containers to the gui.
        
        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the container.
            parent_id: str
                If parent_id == window_id then not required, 
                If another container then required.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            hide_index: Optional[int],
                Which item indexes to hide.
            show_stack: bool,
                Show the top later of the stack.
            show: bool
                Shows or hides widget.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """
        
    def add_scrollable(self,
                        window_id: str,
                        container_id: str,
                        *,
                        parent_id: str=None,
                        width: Optional[float]=None,
                        height: Optional[float]=None,
                        width_fill: bool=False,
                        height_fill: bool=False,
                        direction: IpgScrollableDirection=IpgScrollableDirection.Horizontal,
                        h_bar_width: float=10.0,
                        h_bar_margin: float=0.0,
                        h_scroller_width: float=10.0,
                        h_bar_alignment: IpgAlignment=IpgAlignment.Start,
                        v_bar_width: float=10.0,
                        v_bar_margin: float=0.0,
                        v_scroller_width: float=10.0,
                        v_bar_alignment: IpgAlignment=IpgAlignment.Start,
                        on_scroll: Optional[Callable]=None,
                        style_id: Optional[str]=None,
                        user_data: Optional[any]=None,
                        ) -> int:
        """
        Wraps a scrollable widget around a container.

        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the scrollable.
            parent_id: str
                If parent_id == window_id then not required, 
                If another container then required.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            direction: IpgScrollableDirection
                Sets the direction of the scrollable, Vertical, Horizontal, Both.
            h_bar_width: float
                Sets the horizontal bar width.
            h_bar_margin: float
                Sets the horizontal bar margin.
            h_scroller_width: float
                Sets the horizontal scroller bar width
            h_bar_alignment: IpgScrollableAlignment
                Sets the horizontal bar alignment Start or End
            v_bar_width: float
                Sets the vertical bar width.
            v_bar_margin: float
                Sets the vertical bar margin.
            v_scroller_width: float
                Sets the vertical scroller bar width
            v_bar_alignment: IpgScrollableAlignment
                Sets the vertical bar alignment Start or End
            on_scroll: Callable
                The callback function that is called when scrolling occurs
            style_id: str
                Style_id from add_scrollable_style
            user_data: any 
                Any data in any form needed by user to be passed through as a callback. 
            show: bool
                Shows or hides widget.
    
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_scrollable_style(self,
                            style_id: str,
                            background_color: Optional[IpgColor]=None,
                            background_rgba: Optional[list[float, 4]]=None,
                            border_color: Optional[IpgColor]=None,
                            border_rgba: Optional[list[float, 4]]=None,
                            border_radius: list[float]=0.0,
                            border_width: float=1.0,
                            shadow_color: Optional[IpgColor]=None,
                            shadow_rgba: Optional[list[float, 4]]=None,
                            shadow_offset_x: float=0.0,
                            shadow_offset_y: float=0.0,
                            shadow_blur_radius: float=2.0,
                            text_color: Optional[IpgColor]=None,
                            text_rgba: Optional[list[float, 4]]=None,
                            scrollbar_color: Optional[IpgColor]=None,
                            scrollbar_rgba: Optional[list[float, 4]]=None,
                            scrollbar_border_radius: list[float]=[2.0],
                            scrollbar_border_width: float=1.0,
                            scrollbar_border_color: Optional[IpgColor]=None,
                            scrollbar_border_rgba: Optional[list[float, 4]]=None,
                            scroller_color: Optional[IpgColor]=None,
                            scroller_rgba: Optional[list[float, 4]]=None,
                            scroller_color_hovered: Optional[IpgColor]=None,
                            scroller_rgba_hovered: Optional[list[float, 4]]=None,
                            scroller_color_dragged: Optional[IpgColor]=None,
                            scroller_rgba_dragged: Optional[list[float, 4]]=None,
                            gen_id: Optional[int]=None,
                            ) -> int:
        """
        Add styling to the Scrollable widget.

        Parameters
        ----------
        style_id: str,
            Id used in the add_scrollable widget
        background_color: Optional[IpgColor]=None
            Background color of the container.
        background_rgba: Optional[list[float, 4]]=None
            Background color of the container in rgba format.
        border_color: Optional[IpgColor]=None
            Color of the border.
        border_rgba: Optional[list[float, 4]]=None
            Color of the border in rgba format.
        border_radius: list[float]=0.0
            Radius a list of 1=all or 4=[top-left, top-right, bottom-right, bottom-left]
        border_width: float=1.0
            Width of border.
        shadow_color: Optional[IpgColor]=None
            Color of shadow.
        shadow_rgba: Optional[list[float, 4]]=None
            Color of shadow in rgba format.
        shadow_offset_x: float=0.0
            The offset of the show in the x direction.
        shadow_offset_y: float=0.0
            The offset of the show in the y direction.
        shadow_blur_radius: float=2.0
            How much to blur the shadow.
        text_color: Optional[IpgColor]=None
            Color of the text.
        text_rgba: Optional[list[float, 4]]=None
            Color of the text in rgba format.
        scrollbar_color: Optional[IpgColor]=None
            Color of the scrollbar.
        scrollbar_rgba: Optional[list[float, 4]]=None
            Color of the scrollbar in rgba format.
        scrollbar_border_radius: list[float]=[2.0]
            Radius a list of 1=all or 4=[top-left, top-right, bottom-right, bottom-left]
        scrollbar_border_width: float=1.0
            Width of the scrollbar.
        scrollbar_border_color: Optional[IpgColor]=None
            Color of the scrollbar.
        scrollbar_border_rgba: Optional[list[float, 4]]=None
            Color of the scrollbar in rgba format.
        scroller_color: Optional[IpgColor]=None
            Color of the scroller
        scroller_rgba: Optional[list[float, 4]]=None
            Color of the scroller in rgba format.
        scroller_color_hovered: Optional[IpgColor]=None
            Color of the scroller when the mouse hovers.
        scroller_rgba_hovered: Optional[list[float, 4]]=None
            Color of the scroller when the mouse hovers in rgba format.
        scroller_color_dragged: Optional[IpgColor]=None
            Color of the scroller when the mouse drags the scroller.
        scroller_rgba_dragged: Optional[list[float, 4]]=None
            Color of the scroller when the mouse drags the scroller in rgba format.
        gen_id: Optional[int]=None
            The only allowable entry for this id is the value generated by ipg.generate_id().
        """

    def add_tool_tip(self,
                        window_id,
                        container_id: str,
                        position: str,
                        text_to_display: str,
                        *,
                        parent_id: Optional[str]=None,
                        gap: int=10,
                        style_id: str,
                     ) -> int:
    
        """
        Adds a tooltip container to the widget.

        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            container_id: str
                The id of the tooltip.
            position: str
                The position of the tooltip, bottom, top, left, right, or float.
            text_to_display: str
                Sets the tooltip message.
            parent_id: str
                Id of another container, if not placing in a window.
            gap: int
                Sets the distance away from the widget.
            style: str
                Sets the style of the tooltip.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_button(self,
                    parent_id: str,
                    label: str,
                    *,
                    gen_id: Optional[int]=None,
                    on_press: Optional[Callable]=None,
                    width: Optional[float]=None,
                    height: Optional[float]=None,
                    width_fill: bool=False,
                    height_fill: bool=False,
                    padding: list=[10.0],
                    clip: bool=False, 
                    style_id: Optional[str]=None,
                    style_standard: Optional[IpgStyleStandard]=None,
                    style_arrow: Optional[IpgButtonArrow]=None,
                    user_data: Optional[any]=None,
                    show: bool=True, 
                    ) -> int:
        """
        Adds a button to the gui
        
        Parameters
        ----------
            parent_id: str
                id of another container.
            label: str
                label of button, this field is ignored when style_arrow is used.
            gen_id: int
                The only allowable entry for this id is the value generated by ipg.generate_id().
            on_press: Callable
                The function called when the button is pressed.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            padding: List[float]
                Sets the padding for widget.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            clip: bool
                Whether to clip the label if width exceeded.
            style: str
                style_id of the add_button_style.
            style_standard: class
                IpgStyleStandard: Primary, Success, Danger, Text
            style_arrow: IpgButtonArrows
                See dropdown list when IpgButtonArrow. is typed in when period is typed.
            user_data: any 
                Any data in any form needed by user to be passed through as a callback. 
            show: bool
                Shows or hides widget.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """
    def add_button_style(self,
                            style_id: str, 
                            *,
                            background_color: Optional[IpgColor]=None,
                            background_rgba: Optional[list[float, 4]]=None,
                            background_color_hovered: Optional[IpgColor]=None,
                            background_rgba_hovered: Optional[list[float, 4]]=None,
                            border_color: Optional[IpgColor]=None, 
                            border_rgba: Optional[list[float, 4]]=None,
                            border_radius: list[float | float, 4]=[0.0], 
                            border_width: float=1.0,
                            shadow_color: Optional[IpgColor]=None, 
                            shadow_rgba: Optional[list]=None,
                            shadow_offset_x: float=0.0, 
                            shadow_offset_y: float=0.0,
                            shadow_blur_radius: float=1.0,
                            text_color: Optional[IpgColor]=None, 
                            text_rgba: Optional[list[float, 4]]=None
                        ) -> int:
        """
        Adds styling to container

        Parameters
        ----------
            style_id: str
                Id of container_style. 
            background_color: Optional[IpgColor]=None
                Color of the background.
            background_rgba: Optional[list[float, 4]]=None
                Color of the background in rgba format.
            background_color_hovered: Optional[IpgColor]=None,
                Color to use when the mouse hovers.
            background_rgba_hovered: Optional[list[float, 4]]=None,
                Color to use when the mouse hovers in rgba format.
            border_color: Optional[IpgColor]=None
                Color used for the border.
            border_rgba: list[float; 4]=None
                Color of the border in rgba format.
            border_radius: Optional[list[float]]=None
                The radius border, [float]=all corners, 
                [float, 4]=[top-left, top-right, bottom-right, bottom-left].
            border_width: float
                Border width.
            shadow_color: IpgColor
                The color of the shadow.
            shadow_rgba: list
                The color in rgba format [float; 4] used as state above.
            shadow_offset_x: float
                Shadow offset in the horizontal direction.
            shadow_offset_y: float
                Shadow offset in the vertical direction.
            shadow_blur_radius: float
                The blur radius of the shadow.
            text_color: IpgColor
                The text color, if not defined, will either be a Black or White variation based on theme background.
            text_rgba: list]
                The color in rgba format [float; 4] used as state above.
        """

    def add_card(self,
                    parent_id, 
                    head, 
                    body, 
                    foot: Optional[str]=None,
                    gen_id: Optional[int]=None,
                    is_open: bool=True, 
                    close_size: float=0.0, 
                    on_close: Optional[Callable]=None,
                    width: Optional[float]=None, 
                    height: Optional[float]=None, 
                    max_width: float="inf",
                    max_height: float="inf", 
                    padding_head: float=5.0, 
                    padding_body: float=5.0, 
                    padding_foot: float=5.0,
                    show: bool=True,
                    style: IpgCardStyle=IpgCardStyle.Primary, 
                    user_data: Optional[any]=None, 
                ) -> int:
        """
        Adds a card to hold text strings.  No widgets can be added at this time.

        Parameters
        ----------
            parent_id: str
                id of another container or window.
            head: str
                Sets the text in the header of the card.
            body: str
                Sets the text in the body of the card.
            foot: str
                Sets the text in the footer of the card.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            is_open: bool
                Determines if the card is opened or minimized.
            close_size: float
                The size of the close icon.
            on_close: Optional[Callable]
                The callback function called when the card is minimized.
            width: Optional[float]
                Sets the width of the card 
            height: Optional[float]
                Sets the height of the card.
            max_width: float
                Sets the maximum width of the card.
            max_height: float
                Sets the maximum height of the card.
            padding_head: float
                Sets the padding around the head. 
            padding_body: float
                Sets the padding around the body. 
            padding_foot: float
                Sets the padding around the footer.
            show: bool
                Shows or hides the card.
            style: IpgCardStyles
                Sets the style of the card. 
            user_data: any 
                Any data in any form needed by user to be passed through as a callback. 

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_checkbox(self,
                    parent_id: str,
                    *,
                    on_toggle: Optional[Callable]=None,
                    is_checked: bool=False,
                    label: Optional[str]=None,
                    gen_id: Optional[int]=None,
                    width: Optional[float]=None,
                    width_fill: bool=False,
                    size: float=16.0,
                    spacing: float = 15.0,
                    text_line_height: float=1.3,
                    text_shaping: str = "basic",
                    text_size: float=16.0,
                    icon_x: bool=False,
                    icon_size: float=25.0,
                    style_id: Optional[str]=None,
                    style_standard: Optional[IpgStyleStandard]=None,
                    user_data: Optional[Any]=None,
                    show: bool=True,
                    ) -> int:
        """
        Adds a checkbox to the gui.
        When styling, the base color appears during a mouse hover and when checked.  
        If border color is not assigned, the border color will be the base color.
        
        Parameters
        ----------
            parent_id: str
                id of another container or window.
            on_toggle: Callable
                The function called when checkbox is toggled.
            is_checked: bool
                Whether checked or not.
            label: str
                Sets the label to the right of the checkbox.
            gen_id: int
                The only allowable entry for this id is the one generated by ipg.generate_id().
            width: float, optional)
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            size: float
                Sets the size of checkbox.
            spacing: float
                Sets the spacing between the Checkbox and the text.
            text_line_height: float
                Sets the text Line Height of the Checkbox.
            text_shaping: str
                When set to "Advanced", requires adding fonts.
            text_size: float
                Sets the size of the text beside the checkbox.
            icon_x: bool
                If true, uses the x versus the check mark icon.
            icon_size: float
                Sets the size of either the check or x icon.
            style_id: str
                style_id of the add_checkbox_style.
            style_standard: class
                IpgStyleStandard: Primary, Success, Danger, Text(not valid)
            user_data: any 
                Any data in any form needed by user to be passed through as a callback. 
            show: bool
                Shows or hides widget.
           
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """
    
    def add_checkbox_style(self,
                            style_id: str, 
                            *,
                            background_color: Optional[IpgColor]=None,
                            background_rgba: Optional[list]=None,
                            accent_color: Optional[IpgColor]=None,
                            accent_rgba: Optional[list[float, 4]]=None,
                            accent_color_hovered: Optional[IpgColor]=None,
                            accent_rgba_hovered: Optional[list[float, 4]]=None,
                            border_color: Optional[IpgColor]=None, 
                            border_rgba: Optional[list]=None,
                            border_radius: list=[0.0], 
                            border_width: float=1.0,
                            text_color: Optional[IpgColor]=None, 
                            text_rgba: Optional[list]=None
                        ) -> int:
        """
        Adds styling to container

        Parameters
        ----------
            style_id: str
                Id of container_style. 
            background_color: Optional[IpgColor]=None
                The background color of the box.
            background_rgba: list,
                The background color of the box in rgba format.
            accent_color: Optional[IpgColor]=None
                The color of the box when checked.
            accent_rgba: Optional[list[float, 4]]=None
                The color of the box in rgba format in rgba format.
            accent_color_hovered: Optional[IpgColor]=None
                The color used for the mouse hover over the box that is checked.
            accent_rgba_hovered: Optional[list[float, 4]]=None
                The color used for the mouse hover over the box that is checked in rgba format.
            border_color: Optional[IpgColor]=None
                The color for the border.
            border_rgba: Optional[list[float, 4]]=None
                The color of the border in rgba format used as state above.
            border_radius: list
                The radius of the 4 corners, [float]=all corners, 
                [float, 4] top-left, top-right, bottom-right, bottom-left.
            border_width: float
                The border width.
            text_color: Optional[IpgColor]=None
                The text color, if not defined, will either be a Black or White variation based on theme background.
            text_rgba: Optional[list[float, 4]]=None
                The text color in rgba format.
        """

    # def add_color_picker(
    #                     self,
    #                     parent_id: str,
    #                     *,
    #                     label: str="Get Color",
    #                     gen_id: Optional[int]=None,
    #                     on_submit: Optional[Callable]=None,
    #                     width: Optional[float]=None,
    #                     height: Optional[float]=None,
    #                     width_fill: bool=False,
    #                     height_fill: bool=False,
    #                     padding: List=[10.0],
    #                     corner_radius: float=0.0,
    #                     style_standard: IpgStyleStandard.Primary,
    #                     user_data: Optional[Any]=None,
    #                     show: bool=True, 
    #                     ) -> int:
    #     """
    #     Adds a color picker.  The args for style and such are for the activation button.
    #     No styling for the Date Picker itself is available at this time.
        
    #     Parameters
    #     ----------
    #         parent_id: str
    #             Id of another container to place the widget in.
    #         label: str
    #             The label for the button which activates the picker.
    #         gen_id: int
    #             The only allowable entry for this id is that generated by ipg.generate_id().
    #         on_submit: Callable
    #             The function that executs when the submit button is pressed.
    #         width: float
    #             Sets the width of the button.
    #         width_fill: bool
    #             Sets the width to fill the available space, overrides width.
    #         height: float
    #             Sets the height of the button.   
    #         height_fill: bool
    #             Sets the height to fill the available space, overrides height.
    #         padding: List[float]
    #             Sets the padding for the widget.
    #             use [float] for all sides,
    #             use [float, float] for [top&bottom, left&right]
    #             use [float, float, float, float] for [top, right, bottom, left]
    #         corner_radius: float
    #             Sets the roundness of the corners of the button.
    #         style: IpgStyleStandard
    #             Sets the style of the button.
    #         show: bool
    #             To show the widget or not.
    #         user_data: any
    #             Any data that might be needed in the callback function.
            
    #     Returns
    #     -------
    #     id: int
    #         Internal id of widget and can be used by user if equated.
    #     """

    def add_date_picker(self,
                        parent_id: str,
                        *,
                        label: str="Calendar",
                        gen_id: Optional[int]=None,
                        size_factor: float=1.0,
                        padding: list=[5.0],
                        on_submit: Optional[Callable]=None,
                        user_data: Optional[Any]=None,
                        show=False,
                        button_style_standard,
                        )  -> int:
        
        """
        Adds a date_picker widget.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            label: str
                The label name of the button that activates the date picker.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            size_factor: float
                The size of the displayed calendar, must be > 1.0.
            padding: List[float]
                The padding around the calendar.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            on_submit: Callable
                Callback function selected date is submitted.
            show: bool
                To show the widget or not.
            user_data: any
                Any data that might be needed in the callback function.
            button_style_standard: IpgStyle_standard
                One of the standard button styles for the starting button.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """
    
    def add_image(self, 
                    parent_id: str, 
                    image_path: str,
                    *,
                    gen_id: int=None, 
                    on_press: Optional[Callable]=None, 
                    on_release: Optional[Callable]=None, 
                    on_right_press: Optional[Callable]=None, 
                    on_right_release: Optional[Callable]=None, 
                    on_middle_press: Optional[Callable]=None, 
                    on_middle_release: Optional[Callable]=None,
                    on_enter: Optional[Callable]=None,
                    on_move: Optional[Callable]=None,
                    on_exit: Optional[Callable]=None,
                    padding: list[float], 
                    width: Optional[float]=None,
                    height: Optional[float]=None,
                    width_fill: bool=False,
                    height_fill: bool=False,
                    content_fit: IpgImageContentFit=IpgImageContentFit.Contain,
                    filter_method: IpgImageFilterMethod=IpgImageFilterMethod.Linear, 
                    rotation: IpgImageRotation=IpgImageRotation.Floating,
                    rotation_radians: float=0.0,
                    opacity: float=1.0,
                    mouse_pointer: Optional[IpgMousePointer]=None,
                    show: bool=True,  
                    user_data: Optional[Any]=None,
                    ) -> int:
        """
        Adds an image widget.  The image is selectable using callbacks for all 3 mouse buttons.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            image_path: str
                Path to where the image is.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_press: Callable
                Function to call for left mouse button pressed. 
            on_release: Callable
                Function to call for left mouse button released. 
            on_right_press: Callable
                Function to call for right mouse button pressed. 
            on_right_release: Callable
                Function to call for right mouse button released.  
            on_middle_press: Callable
                Function to call for middle mouse button pressed. 
            on_middle_release: Callable
                Function to call for middle mouse button released.
            on_enter: Callable
                Function to call for mouse enters in text area.
            on_move: Callable
                Function to call for mouse moves in text area.
            on_exit: Callable
                Function to call for mouse exits text area.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            content_fit: IpgImageContentFit
                Contain - The image will be scaled (preserving aspect ratio) so that it just fits within the window.
                Cover - Scale the image to cover all of the bounding box, cropping if needed.
                Fill - Distort the image so the widget is 100% covered without cropping.
                IpgNone - Don't resize or scale the image at all.  This is best for when you've sized the image yourself.
                ScaleDown - Scale the image down if it's too big for the space, but never scale it up.
            filter_method: IpgImageMethodFilter
                Linear - Bi-linear interpolation image filtering strategy.
                Nearest - Nearest neighbor image filtering strategy.
            rotation: IpgImageRotation
                Floating - When image is rotated, it floats above the container, not distorting it.
                Solid - When the image is rotated, the container resizes to fit.
            rotation_radians: float
                Amount to rotate, 180 degrees = 3.14159 radians.
            opacity: float
                How much opacity, 1=opaque, 0=transparent
            mouse_pointer: Optional[IpgMousePointer]
                How the mouse pointer appears when over the image.
            show: bool
                To show the widget or not.
            user_data: any
                Any data that might be needed in the callback function.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_menu(self, 
                parent_id: str,  
                items: OrderedDict[str, list[str]],
                bar_widths: list[float],
                item_widths: list[float],  
                *,
                on_select: Optional[Callable]=None,
                bar_spacing: Optional[float]=None,
                bar_padding: Optional[list[float] | list[float, 4]]=None,
                bar_height: Optional[float]=None,
                bar_check_bounds_width: Optional[float]=None,
                item_spacings: Optional[list[float]]=None,
                item_offsets: Optional[list[float]]=None,
                menu_bar_style: Optional[str]=None,
                menu_style: Optional[str]=None,
                button_bar_style_all: Optional[tuple]=None,
                button_item_style_all: Optional[tuple[IpgStyleStandard, str]]=None,
                checkbox_item_style_all: Optional[tuple[IpgStyleStandard, str]]=None,
                toggler_item_style_all: Optional[tuple[IpgStyleStandard, str]]=None,
                circle_item_style_all: Optional[str]=None,
                dot_item_style_all: Optional[str]=None,
                label_item_style_all: Optional[str]=None,
                line_item_style_all: Optional[str]=None,
                text_item_style_all: Optional[tuple[IpgStyleStandard, str]]=None,
                item_styles: Optional[list[tuple[int, int, IpgMenuType, IpgStyleStandard]]]=None,
                gen_id: Optional[int]=None,
                user_data: Optional[Any]=None,
                ) -> int:
        """
        Add a menu dropdown list to the gui.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            items: OrderedDict[str, list[str]]
                Sets the menu items with the key being the bar item and values the menu items.
            bar_widths: list[float]
                Widths of the bars.
            item_widths: list[float]
                The widths of the bar items.
            item_spacings: list[float]
                The space between labels
            item_offsets: Optional[list[float]]=None
                Offsets from the bar of the dropdown items.
            menu_bar_style: Optional[str]=None
                Style_id of the menu bars.
            menu_style: Optional[str]=None
                menu_style id.
            button_bar_style_all: Optional[tuple]=None
                Button style id from the add_button_style() method.
            on_select: Callable
                The callback for when the menu item is selected.
            bar_spacing: Optional[float]=None
                Spacing betweens bars.
            bar_padding: Optional[list[float] | list[float, 4]]=None
                Padding between bars.
            bar_height: Optional[float]=None
                Height of bars.
            bar_check_bounds_width: Optional[float]=None
                Widths of the dropdowns.
            bar_style_all: IpgStandardStyle or style_id
                Styles all of the menu bar items.
                if using custom style_id, use add_menu_bar_style()
            button_item_style_all: IpgStandardStyle or style_id
                Styles all of the buttons used in the menu items, if added.
                if using custom style_id, use the add_button_style()
            checkbox_item_style_all: IpgStandardStyle or style_id
                Styles all of the checkboxes used in the menu items, if added.
                if using custom style_id, use the add_checkbox_style()
            toggler_item_style_all: Optional[tuple[IpgStyleStandard, str]]=None
                Style all of the toggler used in the menu items.
            circle_item_style_all: style_id
                Styles all the circles used in the menu items, if added.
                if using custom style_id, use the add_menu_separator_style()
            dot_item_style_all: style_id
                Styles all the dotted line separators used in the menu items, if added.
                if using custom style_id, use the add_menu_separator_style()
            label_item_style_all: style_id
                Styles all the label separators used in the menu items, if added.
                if using custom style_id, use the add_menu_separator_style()
            line_item_style_all: style_id
                Styles all the line separators used in the menu items, if added.
                if using custom style_id, use the add_menu_separator_style()
            text_item_style_all: IpgStandardStyle or style_id
                Styles all the text used in the menu.
                if using custom style_id, use the add_menu_text_style()
            item_styles: Optional[list[tuple[int, int, IpgMenuType, IpgStyleStandard]]]=None
                Styling individual items, row, col, type, or standard style.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            user_data: any
                Any data in any form needed by user to be passed through as a callback.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_menu_bar_style(self,
                            style_id: str,
                            *,
                            base_color: Optional[IpgColor]=None,
                            base_rgba: Optional[list[float, 4]]=None,
                            border_color: Optional[IpgColor]=None,
                            border_rgba: Optional[list[float, 4]]=None,
                            border_radius: Optional[list[float] | list[float, 4]]=None,
                            border_width: Optional[float]=None,
                            shadow_color: Optional[IpgColor]=None,
                            shadow_rgba: Optional[list[float, 4]]=None,
                            shadow_offset_x: Optional[float]=None,
                            shadow_offset_y:Optional[float]=None,
                            shadow_blur_radius: Optional[float]=None,
                            gen_id: Optional[int]=None,
                       ) -> int:
        """
        Adds style in the menu itself, not the menu items or bar items

        Parameters
        ----------
            style_id: str,
                Style id use in add_menu(menu_bar_style=style_id)
            base_color: Optional[IpgColor]=None,
                Base color of the menu bar
            base_rgba: Optional[list[float, 4]]=None,
                Base color in rgba format.
            border_color: Optional[IpgColor]=None,
                Border color.
            border_rgba: Optional[list[float, 4]]=None,
                Border color in rgba format.
            border_radius: Optional[list[float] | list[float, 4]]=None,
                border radius [all] and [top-left, top-right, bottom-right, bottom-left
            border_width: Optional[float]=None,
                Border width
            shadow_color: Optional[IpgColor]=None,
                Shadow color.
            shadow_rgba: Optional[list[float, 4]]=None,
                Shadow color in rgba format.
            shadow_offset_x: Optional[float]=None,
                Shadow offset in x direction.
            shadow_offset_y:Optional[float]=None,
                Shadow offset in y direction.
            shadow_blur_radius: Optional[float]=None,
                Radius of the blur.
            gen_id: Optional[int]=None,
                The only allowable entry for this id is that generated by ipg.generate_id().

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_menu_style(self,
                       style_id: str,
                        *,
                        base_color: Optional[IpgColor]=None,
                        base_rgba: Optional[list[float, 4]]=None,
                        border_color: Optional[IpgColor]=None,
                        border_rgba: Optional[list[float, 4]]=None,
                        border_radius: Optional[list[float] | list[float, 4]]=None,
                        border_width: Optional[float]=None,
                        shadow_color: Optional[IpgColor]=None,
                        shadow_rgba: Optional[list[float, 4]]=None,
                        shadow_offset_x: Optional[float]=None,
                        shadow_offset_y:Optional[float]=None,
                        shadow_blur_radius: Optional[float]=None,
                        path_base_color: Optional[IpgColor]=None,
                        path_base_rgba: Optional[list[float, 4]]=None,
                        path_border_color: Optional[IpgColor]=None,
                        path_border_rgba: Optional[list[float, 4]]=None,
                        path_border_radius: Optional[list[float] | list[float, 4]]=None,
                        path_border_width: Optional[float]=None,
                        gen_id: Optional[int]=None,
                       ) -> int:
        """
        Adds style in the menu itself, not the menu items or bar items

        Parameters
        ----------

            style_id: str
                Style id used in add_menu(menu_style=style_id
            base_color: Optional[IpgColor]=None
                Base color of menu.
            base_rgba: Optional[list[float, 4]]=None
                Base color of menu in rgba format.
            border_color: Optional[IpgColor]=None
                Border color of menu.
            border_rgba: Optional[list[float, 4]]=None
                Border color of menu in rgba format.
            border_radius: Optional[list[float] | list[float, 4]]=None
                Radius of border, [all] or [top-left, top-right, bottom-right, bottom-left].
            border_width: Optional[float]=None
                Width of border.
            shadow_color: Optional[IpgColor]=None
                Color of the shadow.
            shadow_rgba: Optional[list[float, 4]]=None
                Color of the shadow in rgba format.
            shadow_offset_x: Optional[float]=None
                Offset of the show in the x direction.
            shadow_offset_y:Optional[float]=None
                Offset of the show in the y direction.
            shadow_blur_radius: Optional[float]=None
                The radius of the blur.
            path_base_color: Optional[IpgColor]=None
                The base color of the dropdown list.
            path_base_rgba: Optional[list[float, 4]]=None
                The base color of the dropdown list in rgba format.
            path_border_color: Optional[IpgColor]=None
                The border color of the dropdown list.
            path_border_rgba: Optional[list[float, 4]]=None
                The border color of the dropdown list in rgba format.
            path_border_radius: Optional[list[float] | list[float, 4]]=None
                The radius of the border of the dropdown list, [all] or [top-left, top-right, bottom-right, bottom-left].
            path_border_width: Optional[float]=None
                The width of the border of the dropdown list.
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_menu_separator_style(self,
                                style_id: str,
                                separator_type: IpgMenuSeparatorType,
                                *,
                                height: float=20.0,
                                height_fill: bool=False,
                                width: Optional[float]=None,
                                width_fill: bool=True,
                                quad_ratios: Optional[list[float]]=None,
                                separator_color: Optional[IpgColor]=None,
                                separator_rgba: Optional[list[float]]=None,
                                separator_border_color: Optional[IpgColor]=None,
                                separator_border_rgba: Optional[list[float]]=None,
                                separator_border_width: Optional[float]=None,
                                separator_border_radius: Optional[list[float]]=None,
                                separator_shadow_color: Optional[IpgColor]=None,
                                separator_shadow_rgba: Optional[list[float]]=None,
                                separator_shadow_offset: Optional[list[float]]=None,
                                separator_shadow_blur_radius: Optional[float]=None,
                                background_color: Optional[IpgColor]=None,
                                background_rgba: Optional[list[float]]=None,
                                background_border_color: Optional[IpgColor]=None,
                                background_border_rgba: Optional[list[float]]=None,
                                background_border_width: Optional[float]=None,
                                background_border_radius: Optional[list[float]]=None,
                                background_shadow_color: Optional[IpgColor]=None,
                                background_shadow_rgba: Optional[list[float]]=None,
                                background_shadow_offset: Optional[list[float]]=None,
                                background_shadow_blur_radius: Optional[float]=None,
                                gen_id: Optional[int]=None,
                                ) -> int:
        """
        The styling of the separators, if used, in the menu.

        Parameters
        ----------
            style_id: str
            separator_type: IpgMenuSeparatorType
            height: float=20.0
            height_fill: bool=False
            width: Optional[float]=None
            width_fill: bool=True
            quad_ratios: Optional[list[float]]=None
            separator_color: Optional[IpgColor]=None
            separator_rgba: Optional[list[float]]=None
            separator_border_color: Optional[IpgColor]=None
            separator_border_rgba: Optional[list[float]]=None
            separator_border_width: Optional[float]=None
            separator_border_radius: Optional[list[float]]=None
            separator_shadow_color: Optional[IpgColor]=None
            separator_shadow_rgba: Optional[list[float]]=None
            separator_shadow_offset: Optional[list[float]]=None
            separator_shadow_blur_radius: Optional[float]=None
            background_color: Optional[IpgColor]=None
            background_rgba: Optional[list[float]]=None
            background_border_color: Optional[IpgColor]=None
            background_border_rgba: Optional[list[float]]=None
            background_border_width: Optional[float]=None
            background_border_radius: Optional[list[float]]=None
            background_shadow_color: Optional[IpgColor]=None
            background_shadow_rgba: Optional[list[float]]=None
            background_shadow_offset: Optional[list[float]]=None
            background_shadow_blur_radius: Optional[float]=None
            gen_id: Optional[int]=None
        """

    def add_pick_list(self,
                        parent_id: str,
                        options: list=[str],
                        *,
                        gen_id: Optional[int]=None,
                        on_select: Optional[Callable]=None,
                        width: Optional[float]=None,
                        width_fill: bool=False,
                        padding: list=[5.0],
                        placeholder: Optional[str]=None,
                        selected: Optional[str]=None,
                        text_size: float=15.0,
                        text_line_height: float="default",
                        text_shaping: str="basic",
                        handle: Optional[IpgPickListHandle]=None,
                        arrow_size: Optional[float]=None,
                        dynamic_closed: Union[None| IpgButtonArrow]=None,
                        dynamic_opened: Optional[IpgButtonArrow]=None,
                        custom_static: Optional[IpgButtonArrow]=None,
                        style: Union[None, str]=None,
                        user_data: Optional[any]=None,
                        show: bool=True,
                      ) -> int:
        """
        Adds a pick list to the gui.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            options: List
                List of items to select from.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_select: Callable
                Function executed when item selected.
            width: float
                Sets the width of the widget.
            width_fill: bool
                If set, the widget fills the available space.
            padding: List[float]
                Sets the padding for widget.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            placeholder: str
                Sets the dimmed text in the box for user info.
            selected: str
                Sets any preselected item.
            text_size: float
                Sets the size of text.
            text_line_height: float
                Sets the height of the box around the text.
            text_shaping: str
                Sets the shape of the text.
            handle: IpgPickListHandle
                What type of indicator to use for the dropdown list, arrow, ...
            arrow_size: float,
                Size of the arrow indicator, default 16.0
            dynamic_closed: IpgArrows,
                The type of arrow wanted for when the picklist is closed.
            dynamic_opened: IpgArrows
                The type of arrow wanted for when the picklist is opened.
            custom_static: IpgArrows
                The type of arrow wanted for the picklist.
            style_color: str
                style_id of the add_styling_color.
            style_border: str
                style_id of the add_styling_border.
            user_data: any
                Any data in any form needed by user to be passed through as a callback.
            show: bool
                Shows or hides the widget.
    
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_pick_list_style(self,
                            style_id: str,
                            *,
                            background_color: Optional[IpgColor]=None,
                            background_rgba: Optional[list[float, 4]]=None,
                            text_color: Optional[IpgColor]=None,
                            text_rgba: Optional[list[float, 4]]=None,
                            handle_color: Optional[IpgColor]=None,
                            handle_rgba: Optional[list[float, 4]]=None,
                            placeholder_color: Optional[IpgColor]=None,
                            placeholder_rgba: Optional[list[float, 4]]=None,
                            border_color: Optional[IpgColor]=None,
                            border_rgba: Optional[list[float, 4]]=None,
                            border_color_hovered: Optional[IpgColor]=None,
                            border_rgba_hovered: Optional[list[float, 4]]=None,
                            border_radius: Optional[list[float]]=None,
                            border_width: Optional[float]=None,
                            gen_id: Optional[int]=None,
                            ) -> int:
        """
        Add PickList styling.

        Parameters
        -----------

            style_id: str,
            background_color: Optional[IpgColor]=None,
                Color of the background.
            background_rgba: Optional[list[float, 4]]=None,
                Color of the background in  rgba format.
            text_color: Optional[IpgColor]=None,
                Color of the text.
            text_rgba: Optional[list[float, 4]]=None,
                Color of the text in rgba format.
            handle_color: Optional[IpgColor]=None,
                Color of the handle.
            handle_rgba: Optional[list[float, 4]]=None,
                Cor of the handle in rgba format.
            placeholder_color: Optional[IpgColor]=None,
                Color of the placeholder text.
            placeholder_rgba: Optional[list[float, 4]]=None,
                Color of the placeholder text in rgba format.
            border_color: Optional[IpgColor]=None,
                Color of the border.
            border_rgba: Optional[list[float, 4]]=None,
                Color of the border in rgba format.
            border_color_hovered: Optional[IpgColor]=None,
                Color of the border when mouse hovers.
            border_rgba_hovered: Optional[list[float, 4]]=None,
                Color of the border in rgba format when mouse hovers.
            border_radius: Optional[list[float]]=None,
                Radius of the corners [one value]=all corners, [4 values]=[top-left, top_right, , bottom-right, bottom-left]
            border_width: Optional[float]=None,
                Width of the border.
            gen_id: Optional[int]=None,
                The only allowable entry for this id is that generated by ipg.generate_id().
        """

    def add_progress_bar(self,
                        parent_id: str,
                        min: float,
                        max: float,
                        *,
                        value: float=0.0,
                        gen_id: Optional[int]=None,
                        width: Optional[float]=None,
                        width_fill: bool=False,
                        height: float=1.0,
                        style_standard: Optional[IpgStyleStandard]=None,
                        style: Union[None, str]=None,
                        user_data: Union[None, any]=None,
                        show: bool=True,
                         ) -> int:
        """
        Adds a progress bar to the gui.
        
        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            min: float
                Sets the minimum value of bar.
            max: float
                Sets the maximum value of bar.
            value: float 
                Sets the starting value of bar.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            width: float
                Sets the width of the widget.
            width_fill: bool
                If set, the widget fills the available space.
            height: float
                Sets the height of the bar.
            style_standard: Optional[IpgStyleStandard]=None
                A standard style for the widget.
            style: str
                style_id of the add_progress_bar_style.
            user_data: any
                Any data in any form needed by user to be passed through as a callback.
            show: bool
                Shows or hides the widget.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_progress_bar_style(self,
                                style_id: str,
                                *,
                                background_color: Optional[IpgColor]=None,
                                background_rgba: Optional[list[float, 4]]=None,
                                bar_color: Optional[IpgColor]=None,
                                bar_rgba: Optional[list[float, 4]]=None,
                                border_color: Optional[IpgColor]=None,
                                border_rgba: Optional[list[float, 4]]=None,
                                border_radius: Optional[list[float, 4]]=None,
                                border_width: Optional[float]=None,
                                gen_id: Optional[int]=None,
                               ) -> int:
        """
        Add ProgressBar style.

        Parameters
        ----------
            style_id: str
                The style id used in add_progress_bar(style_id=style_id)
            background_color: Optional[IpgColor]=None
                Color of the background.
            background_rgba: Optional[list[float, 4]]=None
                Color of the background in rgba format.
            bar_color: Optional[IpgColor]=None
                Color of the bar.
            bar_rgba: Optional[list[float, 4]]=None
                Color of the bar in rgba format.
            border_color: Optional[IpgColor]=None
                Color of the border.
            border_rgba: Optional[list[float, 4]]=None
                Color of the border in rgba format.
            border_radius: Optional[list[float, 4]]=None
                The radius of the corners, [one value] or [top-left, top-right, bottom-right, bottom-left]
            border_width: Optional[float]=None
                Width of the border
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
        """

    def add_radio(self,
                    parent_id: str,
                    labels: List=[str],
                    *,
                    gen_id: Optional[int]=None,
                    direction: IpgRadioDirection=IpgRadioDirection.Vertical,
                    spacing: float=10.0,
                    padding: List=[10.0],
                    width: Optional[float]=None,
                    width_fill: bool=False,
                    on_select: Optional[Callable]=None,
                    selected_index: Optional[int]=None,
                    size: float=20.0,
                    text_spacing: float=15.0,
                    text_size: float=16.0,
                    text_line_height_pixels: Optional[int],
                    text_line_height_relative: Optional[float]=None,
                    text_shaping: str="basic",
                    user_data: Union[None, any]=None,
                    show: bool=True,
                    style_id: Optional[str]=None,
                  ) -> int:
        """
        Adds a radio button to the gui
        
        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            labels: List[str]
                A list of labels for the radio buttons.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            direction: IpgRadioDirection
                Sets the direction for the radio group.
            spacing: float
                Sets spacing between the radio buttons in the group.
            padding: List[float]
                Sets the padding around the radio group..
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            on_select: Callable
                Function executed when radio button selected.
            selected_index: int
                A pre-selected label index to be selected.
            text_line_height_pixels:int
                Sets the line height for the box around the radio labels in pixels.
            text_line_height_relative:float
                Sets the line height for the box around the radio labels.
            show: bool
                Shows or hides the widget.
            size: float,
                Radius of the round radio button.
            text_spacing: f32
                Spacing between radio and text label.
            spacing: float
                Spacing between the radio buttons.
            text_shaping: str
                Sets the text shape.
            text_size: float
                Sets the size of the text.
            user_data: any
                Any data that might be needed in the callback function.
            show: bool
                Shows or hides the widget.
            style_id: Optional[str]
                Style if of add_radio_style(
    
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_radio_style(self,
                        style_id: str,
                        *,
                        background_color: Optional[IpgColor]=None,
                        background_rgba: Optional[list[float, 4]]=None,
                        background_color_hover: Optional[IpgColor]=None,
                        background_color_hovered: Optional[list[float, 4]]=None,
                        border_color: Optional[IpgColor]=None,
                        border_rgba: Optional[list[float, 4]]=None,
                        border_width: Optional[float]=None,
                        dot_color: Optional[IpgColor]=None,
                        dot_rgba: Optional[list[float, 4]]=None,
                        dot_color_hovered: Optional[IpgColor]=None,
                        dot_rgba_hovered: Optional[list[float, 4]]=None,
                        text_color: Optional[IpgColor]=None,
                        text_rgba: Optional[list[float, 4]]=None,
                        gen_id: Optional[int]=None,
                        ) -> int:
        """
        Add Radio style.

        Parameter
        ---------
            style_id: str,
                The id of the style to use in ipg.add_radio.
            background_color: Optional[IpgColor]=None,
                The color of the background of the radio button.
                Defaults to background transparent.
            background_rgba: Optional[list[float, 4]]=None,
                The color of the background of the radio button in rgba format.
                Defaults to background transparent.
            background_color_hovered: Optional[IpgColor]=None,
                The color of the inner circle when mouse hovers.
                Defaults to background weak color.
            background_rgba_hovered: Optional[list[float, 4]]=None,
                The color of the inner circle when mouse hovers in rgba format.
                Defaults to background weak color.
            border_color: Optional[IpgColor]=None,
                The color of the circle border.
                Defaults to primary.
            border_rgba: Optional[list[float, 4]]=None,
                The color of the circle border.
                Defaults to primary.
            border_width: Optional[float]=None,
                The border width of the circle.
                defaults to 1.0
            dot_color: Optional[IpgColor]=None,
                The color of the dot.
                Defaults to primary.
            dot_rgba: Optional[list[float, 4]]=None,
                The color of the dot.
                Defaults to primary.
            dot_color_hovered: Optional[IpgColor]=None,
                The color of the dot when mouse hovers.
                Defaults to primary.strong.color.
            dot_rgba_hovered: Optional[list[float, 4]]=None,
                The color of the dot when the mouse hovers in rgba format.
                Defaults to primary.strong.color.
            text_color: Optional[IpgColor]=None,
                The color of the text.
                Defaults to a contrast color of the background.
            text_rgba: Optional[list[float, 4]]=None,
                The color of the text.
                Defaults to a contrast color of the background.
            gen_id: Optional[int]=None,
                The only allowable entry for this id is that generated by ipg.generate_id().

        Returns
        -------
            id: int
                Internal id of widget and can be used by user if equated.
        """

    def add_rule_horizontal(self, 
                            parent_id, 
                            *,
                            width: Optional[float]=None, 
                            width_fill: bool=True,
                            thickness: int=1,
                            style: Optional[str]=None,
                            gen_id: Optional[int]=None,
                            ) -> int:
        """
        Add a horizontal line divider.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            width: Optional[float]=None
                Defines the horizontal length of the dividing line.
            width_fill: bool=True
                If set, fills the available space for the horizontal length, overrides width.
            thickness: int=1
                The thickness of the rule.
            style: str
                The id of the add_rule_style.
            gen_id: Optional[int]=None,
                The only allowable entry for this id is that generated by ipg.generate_id().
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_rule_vertical(self, 
                            parent_id,
                            *, 
                            height: Optional[float]=None, 
                            height_fill: bool=True,
                            thickness: int=1,
                            style: Optional[str]=None,
                            gen_id: Optional[int]=None,
                          ) -> int:
        """
        Add a vertical line divider.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            height: Optional[float]=None
                Defines the vertical length of the dividing line.
            height_fill: bool=True
                If set, fills the available space for the vertical length, overrides height.
            thickness: int=1
                The thickness of the rule.
            style: Optional[str]=None,
                The id of the add_rule_style.
            gen_id: Optional[int]=None,
                The only allowable entry for this id is that generated by ipg.generate_id().

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_rule_style(self,
                        style_id: str,
                        color: Optional[IpgColor],
                        color_rgba: Optional[list[float, 4]],
                        border_radius: Optional[list[float, 4]],
                        fillmode_percent: Optional[float],
                        fillmode_padded: Optional[int],
                        fillmode_asymmetric_padding: Optional[list[int, 2]],
                        gen_id: Optional[int],
                        ) -> int:
        """
        Add Rule styling.

        Parameters:
        -----------
            style_id: str
                The id used in the add_rule style parameter.
            color: Optional[IpgColor],
                The color of the rule, background weak if not defined.
            color_rgba: Optional[list[float, 4]]
                The color of the rule
            border_radius: Optional[list[float, 4]],
                The border radius of the rule.
            fillmode_percent: Optional[float],
                Fills the color of the rule to a percent
            fillmode_padded: Optional[uint2],
                Fills the rule with the color container padding on each end.
            fillmode_asymmetric_padding: Optional[list[uint2, 2]],
                Fills the rule with the color asymmetrically.
            gen_id: Optional[int],
                The only allowable entry for this id is that generated by ipg.generate_id().
    Returns
    -------
        id: int
            Internal id of widget and can be used by user if equated.

        """

    def add_selectable_text(self, 
                            parent_id, 
                            text,
                            *,
                            gen_id: Optional[int]=None, 
                            on_press: Optional[Callable]=None, 
                            on_release: Optional[Callable]=None, 
                            on_right_press: Optional[Callable]=None, 
                            on_right_release: Optional[Callable]=None, 
                            on_middle_press: Optional[Callable]=None, 
                            on_middle_release: Optional[Callable]=None,
                            on_enter: Optional[Callable]=None,
                            on_move: Optional[Callable]=None,
                            on_exit: Optional[Callable]=None, 
                            width: Optional[float]=None,
                            height: Optional[float]=None,
                            width_fill: bool=False,
                            height_fill: bool=False, 
                            h_align: str="left",
                            v_align: str="top", 
                            line_height: float=1.3, 
                            shaping: str="basic",
                            size: float=16.0, 
                            show: bool=True,  
                            user_data: Optional[any]=None,
                            ) -> int:
        """
        Adds a selectable text widget.  This selectable text allows more mouse interaction than
        a button with a style of text only.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            text: str 
                The text needed.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_press: Callable
                Function to call for left mouse button pressed. 
            on_release: Callable
                Function to call for left mouse button released. 
            on_right_press: Callable
                Function to call for right mouse button pressed. 
            on_right_release: Callable
                Function to call for right mouse button released.  
            on_middle_press: Callable
                Function to call for middle mouse button pressed. 
            on_middle_release: Callable
                Function to call for middle mouse button released.
            on_enter: Callable
                Function to call for mouse enters in text area.
            on_move: Callable
                Function to call for mouse moves in text area.
            on_exit: Callable
                Function to call for mouse exits text area.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            h_align: str
                Horizontal alignment, left, center, right.
            v_align: str
                Vertical alignment, top, center, bottom.
            line_height: float
                The size of the box the text is in.
            shaping: str
                Shaping of text.
            size: float
                The text size.
            show: bool
                To show the widget or not.
            user_data: any
                Any data that might be needed in the callback function.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_slider(self, 
                   parent_id: str, 
                   min: float, 
                   max: float, 
                   step: float, 
                   value: float,
                   *,
                   gen_id: Optional[int]=None, 
                   show: bool=True, 
                   on_change: Optional[Callable]=None, 
                   on_release: Optional[Callable]=None, 
                   user_data: Optional[any]=None, 
                   width: float=100.0,
                   width_fill: bool=False,
                   height: float=20.0,
                   style_id: Optional[str]=None,
                  ) -> int:
        """
        Adds a slider widget which changes value as the mouse moves the slider.
        The resulting float value can be used by the callbacks to produce the desired results.
        If on_change is used, then the callback is called many times, but only once for the on_release.
        If one wants to connect to a progress bar, then give the connect_progress_bar the id of the pg bar.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            min: float
                The minimum value wanted.
            max: float
                The maximum value wanted.
            step: float 
                The step size. 
            value: float
                The starting value. 
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id(). 
            show:
                shows or hides the widget.
            on_change: Callable
                If set, will use callback with each change. 
            on_release: Callable
                If set, will use callback when released. 
            user_data: any
                Any data that might be needed in the callback function.
            width: float
                Width of the widget.
            height: float
                Height of the widget.
            width_fill: bool 
                Fills the available space horizontally.
            style_id: str
                Id from the add_slider_style()
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_slider_style(self,
                        style_id: str,
                        rail_color: Optional[IpgColor]=None,
                        rail_rgba: Optional[list[float, 4]]=None,
                        rail_color_hovered: Optional[IpgColor]=None,
                        rail_rgba_hovered: Optional[list[float, 4]]=None,
                        rail_width: Optional[float]=None,
                        rail_border_radius: Optional[list[float]]=None,
                        handle_circle_radius: Optional[float]=None,
                        handle_rectangle_width: Optional[int]=None,
                        handle_rectangle_border_radius: Optional[list[float]]=None,
                        handle_color: Optional[IpgColor]=None,
                        handle_rgba: Optional[list[float, 4]]=None,
                        handle_border_width: Optional[float]=None,
                        handle_border_color: Optional[IpgColor]=None,
                        handle_border_rgba: Optional[list[float, 4]]=None,
                        gen_id: Union[None, int]=None,
                         ) -> int:
        """
        Add styling to the Slider.

        Parameters
        ----------
            style_id: str
                The id used in the add_slider style parameter.
            rail_color: Optional[IpgColor]=None
                The color of the rail.
            rail_rgba: Optional[list[float, 4]]=None
                The color of the rail in rgba format.
            rail_color_hovered: Optional[IpgColor]=None
                The color of the rail when mouse hovered.
            rail_rgba_hovered: Optional[list[float, 4]]=None
                The color of the rail when mouse hovered in rgba format.
            rail_width: Optional[float]=None
                The width of the rail.
            rail_border_radius: Optional[list[float]]=None
                rail border radius use either a single list item or a list of 4
            handle_circle_radius: Optional[float]=None
                The circle is the default shape.
                The handle circle radius default=7.0
            handle_rectangle_width: Optional[uint2]=None
                Defining either the width or radius, activates this shape.
                handle width, default=12
            handle_rectangle_border_radius: Optional[list[float]]=None
                handle rectangle border radius default=1.0
            handle_color: Optional[IpgColor]=None
                The handle color used during mouse hover with IpgColor class.
            handle_rgba: Optional[list[float, 4]]=None
                The handle color used during mouse hover in rgba format.
            handle_border_width: Optional[float]=None
                Handle border width, default=0.0
            handle_border_color: Optional[IpgColor]=None
                Handle border color, default=transparent.
            handle_border_rgba: Optional[list[float, 4]]=None
                Handle border color in rgba format, default=transparent.
            gen_id: Union[None, int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
        Returns
        -------
            id: int
            Internal id of widget and can be used by user if equated.
        
        """

    def add_space(self,
                  parent_id: str,
                  *,
                  gen_id: Optional[int]=None,
                  width: Optional[float]=None,
                  height: Optional[float]=None,
                  width_fill: bool=False,
                  height_fill: bool=False,
                  ) -> int:
        """
        Adds a space between elements for alignment and aesthetics.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            width: float
                Width of the widget.
            height: float
                Height of the widget.
            width_fill: bool 
                Fills the available space horizontally.
            height_fill: bool
                Fills the available space vertically.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """

    def add_svg(self, 
                    parent_id: str, 
                    svg_path: str,
                    *,
                    gen_id: int=None, 
                    on_press: Optional[Callable]=None, 
                    on_release: Optional[Callable]=None, 
                    on_right_press: Optional[Callable]=None, 
                    on_right_release: Optional[Callable]=None, 
                    on_middle_press: Optional[Callable]=None, 
                    on_middle_release: Optional[Callable]=None,
                    on_enter: Optional[Callable]=None,
                    on_move: Optional[Callable]=None,
                    on_exit: Optional[Callable]=None, 
                    width: Optional[float]=None,
                    height: Optional[float]=None,
                    width_fill: bool=False,
                    height_fill: bool=False,
                    content_fit: IpgSvgContentFit=IpgSvgContentFit.Contain,
                    rotation: IpgSvgRotation=IpgSvgRotation.Floating,
                    rotation_radians: float=0.0,
                    opacity: float=1.0,
                    mouse_pointer: Optional[IpgMousePointer]=None,
                    show: bool=True,  
                    user_data: Optional[Any]=None,
                    ) -> int:
        """
        Adds an image widget.  The image is selectable using callbacks for all 3 mouse buttons.

        Parameters
        ----------
            parent_id: str
                Id of another container to place the widget in.
            svg_path: str
                Path to where the image is.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_press: Callable
                Function to call for left mouse button pressed. 
            on_release: Callable
                Function to call for left mouse button released. 
            on_right_press: Callable
                Function to call for right mouse button pressed. 
            on_right_release: Callable
                Function to call for right mouse button released.  
            on_middle_press: Callable
                Function to call for middle mouse button pressed. 
            on_middle_release: Callable
                Function to call for middle mouse button released.
            on_enter: Callable
                Function to call for mouse enters in text area.
            on_move: Callable
                Function to call for mouse moves in text area.
            on_exit: Callable
                Function to call for mouse exits text area.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            content_fit: IpgImageContentFit
                Contain - The image will be scaled (preserving aspect ratio) so that it just fits within the window.
                Cover - Scale the image to cover all of the bounding box, cropping if needed.
                Fill - Distort the image so the widget is 100% covered without cropping.
                IpgNone - Don't resize or scale the image at all.  This is best for when you've sized the image yourself.
                ScaleDown - Scale the image down if it's too big for the space, but never scale it up.
            rotation: IpgImageRotation
                Floating - When image is rotated, it floats above the container, not distorting it.
                Solid - When the image is rotated, the container resizes to fit.
            rotation_radians: float
                Amount to rotate, 180 degrees = 3.14159 radians.
            opacity: float
                How much opacity, 1=opaque, 0=transparent
            mouse_pointer: Optional[IpgMousePointer]
                How the mouse pointer appears when over the svg.
            show: bool
                To show the widget or not.
            user_data: any
                Any data that might be needed in the callback function.

        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """
    
    def add_table(self,
                    window_id: str,
                    table_id: str,
                    title: str,
                    data: list[dict],
                    data_length: int,
                    width: float,
                    height: float,
                    *,
                    parent_id: Optional[str]=None,
                    row_highlight: Optional[IpgTableRowHighLight]=None,
                    highlight_amount: float=0.15,
                    column_widths: list=[50.0],
                    button_fill_columns: Optional[list[int]],
                    checkbox_fill_columns: Optional[list[int]],
                    toggler_fill_columns: Optional[list[int]],
                    mixed_widgets_columns: Optional[Dict[int: list[IpgTableWidget]]]=None,
                    button_fill_style_id: Optional[str]=None,
                    button_fill_standard_style: Optional[IpgStyleStandard]=None,
                    checkbox_fill_style_id: Optional[str]=None,
                    checkbox_fill_standard_style: Optional[IpgStyleStandard]=None,
                    toggler_fill_style_id: Optional[str]=None,
                    mixed_widgets_column_style_ids: Optional[Dict[int, list[str]]]=None,
                    gen_id: Optional[int]=None,
                    on_button: Optional[Any]=None,
                    on_checkbox: Optional[Any]=None,
                    on_toggler: Optional[Any]=None,
                    on_scroll: Optional[Any]=None,
                    show: bool=True,
                    modal_show=False,
                    button_user_data: Optional[Any]=None,
                    checkbox_user_data: Optional[Any]=None,
                    toggler_user_data: Optional[Any]=None,
                    scroller_user_data: Optional[Any]=None,
                  ) -> int:

        """
        Adds a table to the gui.

        Parameters
        ----------
            window_id: str
                Id of the window to place container in.
            table_id: str
                The id of the container.
            title: str
                Title used for table.
            data: List[Dict]
                A list of dictionaries, each dictionary contains only one type.
            data_length: int
                The length of the data.
            width: float
                Width of the table.
            height: float
                Height of the table.
            parent_id: Optional[str]
                If parent_id == window_id then not required, 
                If another container then required.
            row_highlight: TableRowHighLight
                Highlights alternate row by either darkening or lightening them up.
            highlight_amount: float
                Amount of highlighting to use if row_highlight is set.
            column_widths: List[float]
                A list of value for the column widths, if only one value is supplied then it will 
                be the default for all columns.
            widgets_columns: dict{int, List[IpgTableWidget]}
                The column where the values are converted to text and used as labels for the widget.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_button: Callable
                Callback when a button is pressed.
            on_checkbox: Callable
                Callback when a checkbox is toggled.
            on_modal: Callable
                Callback when a modal is pressed.
            on_toggler: Callable
                Callback when a toggler is toggled.
            user_data: any
                Any data that might be needed in the callback function.
            show:: bool
                shows or hides the widget.
            
        Returns
        -------
        id: int
            Internal id of widget and can be used by user if equated.
        """


    def add_text(self,
                 parent_id: str,
                 content: str,
                 *,
                 gen_id: Optional[int]=None,
                 width: Optional[float]=None,
                 height: Optional[float]=None,
                 width_fill: bool=False,
                 height_fill: bool=False,
                 horizontal_alignment: Optional[IpgHorizontalAlignment]=None,
                 vertical_alignment: Optional[IpgVerticalAlignment]=None,
                 line_height: str="default",
                 size: float=16.0,
                 shaping: str="basic",
                 show: bool=True,
                 ) -> int:
        """
        Adds a text widget to the gui.

        Parameters
        ----------
            parent_id: str
                id of another container to place the widget in.
            content: str
                Sets the text of the widget.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            width: float, optional)
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width.
            height: float
                Sets the height of the widget.   
            height_fill: bool
                Sets the height to fill the available space, overrides height.
            horizontal_alignment: str
                Aligns text horizontally "Left", "Center", or "Right", width needs to be larger than text.
            vertical_alignment: str
                Aligns text vertically "Left", "Center", or "Right", height needs to be larger than text.
            line_height: float
                Sets the line height of the text.
            size: float
                Sets the text size.
            shaping: str
                Sets the shape of the text using added fonts, uUse "Basic"(None) or "Advanced".
            show:
                shows or hides the widget.
        
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.

        """

    # def add_text_editor(self,
    #                     parent_id: str,
    #                     file_name: str,
    #                     gen_id: Optional[str]=None,
    #                     ) -> int:
    #     """
    #     Adds a text editor widget to the gui.

    #     Parameters
    #     ----------
    #         parent_id: str
    #             id of another container to place the widget in.
    #         file_name: str
    #             Path to the file to be used.
    #         gen_id: int
    #             The only allowable entry for this id is that generated by ipg.generate_id().
        
    #     Returns
    #     -------
    #     id: int
    #         The id of the event which can be used to modify the event through update_item.
    #     """

    def add_text_input(self,
                        parent_id: str,
                        placeholder: str,
                        *,
                        gen_id: Optional[int]=None,
                        on_submit: Optional[Callable]=None,
                        on_input: Optional[Callable]=None,
                        on_paste: Optional[Callable]=None,
                        width: Optional[float]=None,
                        width_fill: bool=False,
                        padding: list[float]=[10.0],
                        size: Optional[float]=20.0,
                        line_height_pixels: Optional[int],
                        line_height_relative: Optional[float],
                        user_data: Optional[any]=None,
                        is_secure: bool=False,
                        style_id: Optional[str]=None,
                        show: bool=True,
                       ) -> int:
        """
        Adds a text_input widget to the gui.  Callbacks on_input and on_submit are
        required for the widget to work.  Using a long lived variable, value = self.value,
        as the text is entered, the value will be updated and displayed via a callback.

        Parameters
        ----------
            parent_id: str
                id of another container to place the widget in.
            placeholder: str
                text used for instructions in the input box.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            on_submit: Callable
                Calls a function when the enter key is pressed, submitting the text.
            on_input: Callable
                Calls a function each time a letter is enter into the text box.
            on_paste: Callable
                Calls a function when the text is pasted into the text box, pressing enter will also submit.
            width: Optional[float]
                Sets the width to a specific value.
            width_fill: bool
                Sets the width to fill available space, overrides width, Default=shrink.
            padding: List[float]
                Sets the padding for widget.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
            size: float
                Sets the text size.
            line_height_pixels: Optional[int],
                Sets the height of the text box in pixels.
            line_height_relative: Optional[float],
                Sets the height of the text box with a float.  
            user_data: any
                Any data that might be needed in the callback function.
            is_secure: bool
                Hides the entered text, for passwords, etc.
            style_id: Optional[str]=None
                The string style_id of add_text_input_style().
            show: bool=True
                Shows or hides the widget.
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_text_input_style(self,
                                style_id: str,
                                background_color: Optional[IpgColor]=None,
                                background_rgba: Optional[list[float, 4]]=None,
                                border_color: Optional[IpgColor]=None,
                                border_rgba: Optional[list[float, 4]]=None,
                                border_color_hovered: Optional[IpgColor]=None,
                                border_rgba_hovered: Optional[list[float, 4]]=None,
                                border_color_focused: Optional[IpgColor]=None,
                                border_rgba_focused: Optional[list[float, 4]]=None,
                                border_width: Optional[float]=None,
                                border_radius: Optional[list[float]]=None,
                                # icon_color: Optional[IpgColor]=None,
                                # icon_rgba: Optional[list[float, 4]]=None,
                                placeholder_color: Optional[IpgColor]=None,
                                placeholder_rgba: Optional[list[float, 4]]=None,
                                value_color: Optional[IpgColor]=None,
                                value_rgba: Optional[list[float, 4]]=None,
                                selection_color: Optional[IpgColor]=None,
                                selection_rgba: Optional[list[float, 4]]=None,
                                gen_id: Optional[int]=None,
                             ) -> int:
        """
        Add textInput styling.

            Parameters
            ----------
                style_id: str
                    Id used in the add_text_input() parameter style.
                background_color: Optional[IpgColor]=None
                    The color of the background.
                background_rgba: Optional[list[float, 4]]=None
                    The color of the background in rgba format.
                border_color: Optional[IpgColor]=None
                    The color of the border.
                border_rgba: Optional[list[float, 4]]=None
                    The color of the border in rgba format.
                border_color_hovered: Optional[IpgColor]=None
                    The color of the border during mouse hover.
                border_rgba_hovered: Optional[list[float, 4]]=None
                    The color of the border during mouse hover in rgba format.
                border_color_focused: Optional[IpgColor]=None
                    The color of the border when the widget has the focus(cursor in box).
                border_rgba_focused: Optional[list[float, 4]]=None
                    The color of the border when the widget has the focus in rgba format.
                border_width: Optional[float]=None
                    The width of the border.
                border_radius: Optional[list[float]]=None
                    The roundness of the border comers, [1 value]=all, [4 values]=[top-left, top-right, bottom-right, bottom-left]
                # icon_color: Optional[IpgColor]=None
                #     The color of the icon 
                # icon_rgba: Optional[list[float, 4]]=None
                placeholder_color: Optional[IpgColor]=None
                    The color of the placeholder text.
                placeholder_rgba: Optional[list[float, 4]]=None
                    The color of the placeholder text in rgba format.
                value_color: Optional[IpgColor]=None
                    The color of the texted typed in.
                value_rgba: Optional[list[float, 4]]=None
                    The color of the text typed in with rgba format.
                selection_color: Optional[IpgColor]=None
                    The text selected by dragging the cursor over the letters.
                selection_rgba: Optional[list[float, 4]]=None
                    The color of the text selected by dragging the cursor over, in rgba format.
                gen_id: Optional[int]=None
                    The only allowable entry for this id is that generated by ipg.generate_id().
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_timer(self,
                        parent_id: str,
                        duration_ms: int,
                        *,
                        on_start: Optional[Callable]=None,
                        on_stop: Optional[Callable]=None,
                        on_tick: Optional[Callable]=None,
                        start_label: str="Start Timer",
                        stop_label: str="Stop Timer",
                        width: Optional[float]=None,
                        height: Optional[float]=None,
                        width_fill: bool=False,
                        height_fill: bool=False,
                        padding: list[float]=[10.0],
                        button_style_id: Optional[str],
                        button_style_standard: Optional[IpgStyleStandard]=None,
                        button_style_arrow: Optional[IpgButtonArrow]=None,
                        user_data: any=None,
                        ) -> int:
        """
        Adds a timer event in millisecond duration.

        Parameters
        ----------
        parent_id: str
            Id of another container.
        duration_ms: int
            The time when the on_tick function fires.
        on_start: Optional[Callable]
            The optional function that execute when the timer starts.
        on_stop: Optional[Callable]
            The optional function that executes when the timer stops.
        on_tick: Optional[Callable]
            The optional function that executes on every timer tick as indicated by duration_ms.
        start_label: str="Start Timer"
            The default start label of the timer button.
        stop_label: str="Stop Timer"
            The default stop label of the timer button.
        width: Optional[float]
            Width of the button, the default is the size of the label.
        height: Optional[float]
            Height of the button, the default is the size of the label.
        width_fill: bool
            Sets the width to fill the container, overrides width.
        height_fill: bool
            Sets the height to fill the container, overrides height.
        padding: list
            Sets the padding for widget.
                use [float] for all sides,
                use [float, float] for [top&bottom, left&right]
                use [float, float, float, float] for [top, right, bottom, left]
        button_style_id: Option<String>
            Id of add_button_style
        button_style_standard: Option<IpgStyleStandard>
            One of the class IpgStyleStandard items.
        button_style_arrow: Option<IpgButtonArrow>
            One of the class of the IpgButtonArrow
        user_data: any
            Any data the user may need during a callback.

        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """


    def add_toggler(self,
                    parent_id: str,
                    *,
                    label: Optional[str]=None,
                    gen_id: Optional[str]=None,
                    toggled: Optional[Callable]=None,
                    width: Optional[float]=None,
                    width_fill: bool=False,
                    size: float=20.0,
                    text_size: float=16.0,
                    text_line_height: float=1.3,
                    text_alignment: IpgHorizontalAlignment=IpgHorizontalAlignment.Center,
                    spacing: float=10.0,
                    user_data: Optional[Any]=None,
                    show: bool=True,
                    style: Optional[str]=None,
                    ) -> int:
        """
        Adds a toggler to the gui
        
        Parameters
        ----------
            parent_id: str
                Id of another container.
            label: str
                label of toggler.
            gen_id: int
                The only allowable entry for this id is that generated by ipg.generate_id().
            toggled: Callable
                The function called when the button is pressed.
            width: float
                Sets the width of the widget.
            width_fill: bool
                Sets the width to fill the available space, overrides width, defaults to shrink.
            size: float
                Size of the toggler.
            text_size: float
                Size of the text label.
            text_line_height: float
                Height of the box containing the text.
            text_alignment: IpgHorizontalAlignment,
                Text alignment within the text box, left, center, right
            spacing: float
                Spacing between the toggler and the text label
            user_data: any 
                Any data in any form needed by user to be passed through as a callback. 
            show: bool
                Shows or hides widget.
            style: str
                style_id of the add_toggler_style().
            
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """
    def add_toggler_style(self,
                            style_id: str,
                            background_color: Optional[IpgColor]=None,
                            background_rgba: Optional[list[float, 4]]=None,
                            background_color_toggled: Optional[IpgColor]=None,
                            background_rgba_toggled: Optional[list[float, 4]]=None,
                            background_border_color: Optional[IpgColor]=None,
                            background_border_rgba: Optional[list[float, 4]]=None,
                            background_border_width: Optional[float]=None,
                            foreground_color: Optional[IpgColor]=None,
                            foreground_rgba: Optional[list[float, 4]]=None,
                            foreground_color_toggled: Optional[IpgColor]=None,
                            foreground_rgba_toggled: Optional[list[float, 4]]=None,
                            foreground_border_color: Optional[IpgColor]=None,
                            foreground_border_rgba: Optional[list[float, 4]]=None,
                            foreground_border_width: Optional[IpgColor]=None,
                          ) -> int:
        """
        Adds a toggler to the gui
        
        Parameters
        ----------
            style_id: str,
            background_color: Optional[IpgColor]
            background_rgba: Optional[list[float, 4]]
            background_color_toggled: Optional[IpgColor]
            background_rgba_toggled: Optional[list[float, 4]]
            background_border_color: Optional[IpgColor]
            background_border_rgba: Optional[list[float, 4]]
            background_border_width: Optional[float]
            foreground_color: Optional[IpgColor]
            foreground_rgba: Optional[list[float, 4]]
            foreground_color_toggled: Optional[IpgColor]
            foreground_rgba_toggled: Optional[list[float, 4]]
            foreground_border_color: Optional[IpgColor]
            foreground_border_rgba: Optional[list[float, 4]]
            foreground_border_width: Optional[IpgColor]
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """
        

    # *******************************events*************************************************************
    def add_event_keyboard(self,
                            enabled: bool,
                            *,
                            on_key_press: Optional[Callable]=None,
                            on_key_release: Optional[Callable]=None,
                            user_data: Optional[any]=None, 
                           ) -> int:
        """
        Add a keyboard event handler to process keyboard actions.

        Parameters
        ----------
        enabled: bool
            Enables the event
        on_key_press: Callable
            Calls a function when a key is pressed.
        on_key_release: Callable
            Calls a function when a key is released.
        user_data: any
            Any data that might be needed in the callback function.

        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_event_mouse(self,
                            enabled: bool,
                            *,
                            on_move: Optional[Callable]=None,
                            on_left_press: Optional[Callable]=None,
                            on_left_release: Optional[Callable]=None,
                            on_middle_press: Optional[Callable]=None,
                            on_middle_release: Optional[Callable]=None,
                            on_right_press: Optional[Callable]=None,
                            on_right_release: Optional[Callable]=None,
                            on_middle_scroll_line: Optional[Callable]=None,
                            on_middle_scroll_pixel: Optional[Callable]=None,
                            user_data: Optional[Any]=None,
                          ) ->int:
        """
        Add a mouse button handlers to process mouse actions.

        Parameters
        ----------
        enabled: bool
            Enables the event
        on_move: Callable
            Calls a function when the mouse is moved.
        on_left_press: Callable
            Calls a function when the left mouse button is pressed.
        on_left_release: Callable
            Calls a function when the left mouse button is released.
        on_middle_press: Callable
            Calls a function when the middle mouse button is pressed.
        on_middle_release: Callable
            Calls a function when the middle mouse button is released.
        on_right_press: Callable
            Calls a function when the right mouse button is pressed.
        on_right_release: Callable
            Calls a function when the right mouse button is released.
        on_middle_scroll_line: Callable
            Calls a function when the middle mouse scroll is scrolled, sends line count.
        on_middle_scroll_pixel: Callable
            Calls a function when the middle mouse scroll is scrolled, send pixel count.
        user_data: any
            Any data that might be needed in the callback function.
        
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_event_window(self,
                         enabled: bool,
                         *,
                        on_closed: Optional[Callable]=None,
                        on_moved: Optional[Callable]=None,
                        on_resized: Optional[Callable]=None,
                        on_redraw_requested: Optional[Callable]=None,
                        on_close_requested: Optional[Callable]=None,
                        on_focused: Optional[Callable]=None,
                        on_unfocused: Optional[Callable]=None,
                        on_file_hovered: Optional[Callable]=None,
                        on_file_dropped: Optional[Callable]=None,
                        on_files_hovered_left: Optional[Callable]=None,
                        user_data: Optional[Any]=None,
                         ) -> int:
        """
        Adds event to the window other than those in the add_window method.

        Parameters
        ----------
        enabled: bool
            Enables the event
        on_closed: Optional[Callable]=None
            Calls a function when the window is closed.
        on_moved: Optional[Callable]=None
            Calls a function when the window is moved.
        on_resized: Optional[Callable]=None
            Calls a function when the window id resized.
        on_redraw_requested: Optional[Callable]=None
            When a redraw command is requested.
        on_close_requested: Optional[Callable]=None
            When a window close is requested, the window setting on_close_request must be set to False.
        on_focused: Optional[Callable]=None
            When an unfocused window is brought into focus.
        on_unfocused: Optional[Callable]=None
            When another window is focused or unfocused.
        on_file_hovered: Optional[Callable]=None
            When a file is dragged over the window. The file path is delivered.
        on_file_dropped: Optional[Callable]=None
            When a file is dropped onto the window. The file path is delivered.
        on_files_hovered_left: Optional[Callable]=None
            When the file leaves the window without being dropped.
        user_data: Optional[Any]=None
            Any data that might be needed in the callback function.
        
        Returns
        -------
        id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def get_color_palette(self,
                          base_color: Optional[IpgColor],
                          base_rgba: Optional[list[float, 4]],
                          ) -> list[list[float], list[float, 4], list[float, 4]]:
        """
        Gets the colors strong, weak, and text in rgba format

        Parameters:
        -----------

            base_color: Optional[IpgColor],
                The color with class IpgColor
            base_rgba: Optional[list[float, 4]],
                The color in rgba format

        Returns:
        -------
            list of 3 lists of rgba colors (strong, weak, text)
        """

    # *******************************all item ops**************************************
        
    def delete_item(self, window_id: str, wid: int):
        """
        Deletes an item using the widgets id.
        Example: btn_id = add_button("Button")
                 delete_item(btn_id)

        Parameters
        ----------
        window_id: str
            Window id in string form.
        wid: int
            The widget id of the widget to be updated.

        Returns
        -------
        None
        """

    def update_item(self,
                    wid: int, 
                    param: str, 
                    value: any,
                    ):
        """
        Update a widget by supplying the widget id, wid, the parameter to update, 
        a class property value, and a value based on the type of value used by the widget.
        
        Parameters
        ----------
        wid: int
            The widget id of the widget to be updated.
        param: class property
            Example: a button has a style class IpgButtonParams with properties of Primary, ...
        value: any 
            Any value which matches that used by the widget.  For example, to set a checkbox to true,
            param=IpgCheckboxParams.IsChecked, value=True  

        Returns
        -------
        None
        """

    def move_widget(self,
                    window_id: str,
                    widget_id: int,
                    target_container_str_id: str,
                    move_after: Optional[int]=None,
                    move_before: Optional[int]=None,
                    ) -> None:
        """
        Moves a widget to another container

        Parameters
        ----------
            window_id: str
                Window id in string form.
            widget_id: int
                widget id in integer form.
            target_container_id: str)
                target container id in string form.
            move_after: Optional[int]
                target position, None = end of list.
            move_before: Optional[int]
                target position, None = end of list.
            
        Returns
        -------
        None
        """
    # def add_canvas_widget(self,
    #                       canvas_id: str,
    #                       widget: IpgCanvasWidget, 
    #                       mode: IpgCanvasMode
    #                       ) -> int:
    #     """
    #     Dynamically adds a canvas widget to the canvas by using 
    #     the mode behavior to place on the canvas.
    #     """
        
        
    def add_arc(self,
                canvas_id: str,
                center_xy: tuple[float, float],
                radius: float,
                start_angle: float,
                end_angle: float,
                stroke_width: float,
                color: Optional[IpgColor]=None,
                fill: bool=False,
                gen_id: Optional[int]=None,
                show: bool=True,
                ) -> int:
        """
        Adds an Arc to the canvas.
        
        Parameters
        ----------
            canvas_id: str
                The canvas to be used for the widget
            center_xy: tuple[float, float]
                center of the arc
            radius: float
                radius of the arc
            start_angle: float
                start angle in radians
            end_angle: float
                end angle in radians
            stroke_width: float
                line width
            color: Optional[IpgColor]
                Line or fill color
            fill: bool=False
                Whether to fill or not
            gen_id: Optional[int]
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool
                Whether to show or hide
                
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_bezier(self,
                    canvas_id: str,
                    points: tuple[tuple[float, float], tuple[float, float], tuple[float, float]],
                    stroke_width: float,
                    color: Optional[IpgColor]=None,
                    fill: bool=False,
                    gen_id: Optional[int]=None,
                    show: bool=True,
                    ) -> int:
        """
        Adds an Bezier to the canvas.
        
        Parameters
        ----------
            canvas_id: str
            points: tuple[tuple[float, float], tuple[float, float], tuple[float, float]]
                3 points are needed to define the bezier
            stroke_width: float
                Line width
            color: Optional[IpgColor]
                line and fill color
            fill: bool
                Whether to fill
            gen_id: Optional[int]
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool
                Whether to show or hide
                
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_circle(self,
                    canvas_id: str,
                    center_xy: tuple[float, float],
                    radius: float,
                    stroke_width: float,
                    color: Optional[IpgColor]=None,
                    fill: bool=False,
                    gen_id: Optional[int]=None,
                    show: bool=True,
                    ) -> int:
        """
        Add Circle to a canvas

        Parameters
        ----------
            canvas_id: str
                String id of the add_canvas().
            center_xy: tuple[float, float]
                Center of the circle.
            radius: float
                Radius of the circle
            stroke_width: float
                Width of the stoke.
            color: Optional[IpgColor]=None
                Color of the circle.
            fill: bool=False
                Whether to fill the circle with the color.
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool=True
                Whether to show or hide the circle.
        
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_ellipse(self,
                canvas_id: str,
                center_xy: tuple[float, float],
                radii: tuple[float, float],
                rotation: float,
                start_angle: float,
                end_angle: float,
                stroke_width: float,
                color: Optional[IpgColor]=None,
                fill: bool=False,
                gen_id: Optional[int]=None,
                show: bool=True,
                ) -> int:
        """
        Adds an ellipse to the canvas.
        
        Parameters
        ----------
            canvas_id: str
                String id of the add_canvas().
            center_xy: tuple[float, float]
                Defines the center
            radii: tuple[float, float]
                Defines the radii
            rotation: float
                Defines the rotation in radians
            start_angle: float
                The start angle in radians
            end_angle: float
                The end angle in radians
            stroke_width: float
                Width of the stoke.
            color: Optional[IpgColor]=None
                Color of the circle.
            fill: bool=False
                Whether to fill the circle with the color.
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool=True
                Whether to show or hide the circle.
        
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_line(self,
                canvas_id: str,
                start: tuple[float, float],
                end: tuple[float, float],
                stroke_width: float,
                color: Optional[IpgColor]=None,
                gen_id: Optional[int]=None,
                show: bool=True,
                ) -> int:
        """
        Add a line to the canvas.
        
        Parameters
        ----------
            canvas_id: str
                String id of the add_canvas().
            start: tuple[float, float]
                Tuple of starting position
            end: tuple[float, float]
                Tuple of starting position
            stroke_width: float
                Width of the stoke.
            color: Optional[IpgColor]=None
                Color of the circle.
            fill: bool=False
                Whether to fill the circle with the color.
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool=True
                Whether to show or hide the circle.
        
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.
        """

    def add_rectangle(self,
                    canvas_id: str,
                    top_left_xy: tuple[float, float],
                    width: float,
                    height: float,
                    stroke_width: float,
                    color: Optional[IpgColor]=None,
                    fill: bool=False,
                    gen_id: Optional[int]=None,
                    show: bool=True,
                    ) -> int:
        """
        Add a rectangle to the canvas.
        
        Parameters
        ----------
            canvas_id: str
                String id of the add_canvas().
            top_left_xy: tuple[float, float]
                Defines the top left corner
            width: float
                Defines the width
            height: float
                Defines the height
            stroke_width: float
                Width of the stoke.
            color: Optional[IpgColor]=None
                Color of the circle.
            fill: bool=False
                Whether to fill the circle with the color.
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool=True
                Whether to show or hide the circle.
        
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.
        """
    
    def add_canvas_image(self,
                    canvas_id: str,
                    image_path: str,
                    top_left_xy: tuple[float, float],
                    width: float,
                    height: float,
                    gen_id: Optional[int]=None,
                    show: bool=True,
                    ) -> int:
        """
        Add an image to the canvas.
        
        Parameters
        ----------
            canvas_id: str
                String id of the add_canvas().
            image_path: str,
                Path to the image file
            top_left_xy: tuple[float, float]
                Location of the top left corner
            width: float
                Defines the width
            height: float  
                Defines the height
            gen_id: Optional[int]=None
                The only allowable entry for this id is that generated by ipg.generate_id().
            show: bool=True
                Whether to show or hide the circle.
        
        Returns
        -------
            id: int
            The id of the event which can be used to modify the event through update_item.    
        """    
        
        
class IpgAlignment:
    """
    How items placed in a container or widget are aligned
    """
    Start=''
    Center=''
    End=''


class IpgHorizontalAlignment:
    """
    How items placed in a container or widget are aligned in the horizontal direction
    """
    Left=''
    Center=''
    Right=''


class IpgVerticalAlignment:
    """
    How items placed in a container or widget are aligned in the vertical direction
    """
    Top=''
    Center=''
    Bottom=''

class IpgButtonParam:
    """
    Button parameters

    Parameters
    ----------
    ArrowStyle: IpgButtonArrow
        A button becomes a type of arrow.
    Height: float
        The height of the button.
    HeightFill: bool
        Whether the button height fills the available space of a container.
    Label: str
        The label of the button.
    Padding: list
        The padding around the button.
    Clip: bool
        Whether the label is clipped or not
    Show: bool
        Whether to show the button
    StyleId: str
        The string id of the button style widget
    StyleStandard: IpgStyleStandard
        One of the standard styles
    Width: float
        The width of the button
    WidthFill: bool
         Whether the button width fills the available space of a container.
    """
    ArrowStyle: IpgButtonArrow
    Height: float
    HeightFill: bool
    Label: str
    Padding: list
    Clip: bool
    Show: bool
    StyleId: str
    StyleStandard: IpgStyleStandard
    Width: float
    WidthFill: bool


class IpgCanvasWidget:
    Bezier: str
    Circle: str
    Line: str
    Polygon: str
    Rectangle: str
    RightTriangle: str
    Triangle: str
    

class IpgCanvasMode:
    New: str
    Edit: str
    Freehand: str 
    PicknPlace: str
    
       
class IpgCardStyle:
    """
    The standard styles for the card widget
    """
    Primary=''
    Success=''
    Danger=''
    Warning=''
    Info=''
    Light=''
    Dark=''
    White=''
    Default=''


class IpgCardParam:
    """
    The card parameters

    Parameters
    ----------
    Body: str
        The body string
    Foot: str
        The footer string
    Head: str
        The header string
    IsOpen: bool
        Whether the card is open or minimized
    Style: IpgCardStyle
        The string id of the add_card_style()
    """
    Body: str
    Foot: str
    Head: str
    IsOpen: bool
    Style: str


class IpgCheckboxParam:
    """
    The Checkbox parameters

    Parameters
    ----------
    IconSize: float
        Size of the icon.
    IconX: bool
        Whether to use and x or the default check.
    IsChecked: bool
        Whether the checkbox is checked or not.
    Label: str
        THe label of the checkbox.
    Show: bool
        Whether to show the checkbox.
    Size: float
        The size of the square.
    Spacing: float
        The spacing between the square and label.
    StyleId: str
        The string id of the checkbox style function.
    StyleStandard: IpgStyleStandard
        One of the standard styles.
    TextLineHeight: float
        The height of the text box holding the label.
    TextSize: float
        The size of the label text.
    Width: float
        The width of the entire checkbox.
    WidthFill: bool
        Whether the checkbox width fills the available space of the container.
    """
    IconSize: float
    IconX: bool
    IsChecked: bool
    Label: str
    Show: bool
    Size: float
    Spacing: float
    StyleId: str
    StyleStandard: IpgStyleStandard
    TextLineHeight: float
    TextSize: float
    Width: float
    WidthFill: bool


class IpgColor:
    """
    The standard colors available
    """
    PRIMARY=''
    SUCCESS=''
    DANGER=''
    WARNING=''
    INFO=''
    LIGHT=''
    DARK=''
    BACKGROUND_THEME=''
    ALICE_BLUE=''
    ANTIQUE_WHITE=''
    AQUA=''
    AQUAMARINE=''
    AZURE=''
    BEIGE=''
    BISQUE=''
    BLACK=''
    BLANCHED_ALMOND=''
    BLUE=''
    BLUE_VIOLET=''
    BROWN=''
    BURLY_WOOD=''
    CADET_BLUE=''
    CHARTREUSE=''
    CHOCOLATE=''
    CORAL=''
    CORNFLOWER_BLUE=''
    CORNSILK=''
    CRIMSON=''
    CYAN=''
    DARK_BLUE=''
    DARK_CYAN=''
    DARK_GOLDEN_ROD=''
    DARK_GRAY=''
    DARK_GREY=''
    DARK_GREEN=''
    DARK_KHAKI=''
    DARK_MAGENTA=''
    DARK_OLIVE_GREEN=''
    DARK_ORANGE=''
    DARK_ORCHID=''
    DARK_RED=''
    DARK_SALMON=''
    DARK_SEA_GREEN=''
    DARK_SLATE_BLUE=''
    DARK_SLATE_GRAY=''
    DARK_SLATE_GREY=''
    DARK_TURQUOISE=''
    DARK_VIOLET=''
    DEEP_PINK=''
    DEEP_SKY_BLUE=''
    DIM_GRAY=''
    DIM_GREY=''
    DODGER_BLUE=''
    FIRE_BRICK=''
    FLORAL_WHITE=''
    FOREST_GREEN=''
    FUCHSIA=''
    GAINSBORO=''
    GHOST_WHITE=''
    GOLD=''
    GOLDEN_ROD=''
    GRAY=''
    GREY=''
    GREEN=''
    GREEN_YELLOW=''
    HONEY_DEW=''
    HOT_PINK=''
    INDIAN_RED=''
    INDIGO=''
    IVORY=''
    KHAKI=''
    LAVENDER=''
    LAVENDER_BLUSH=''
    LAWN_GREEN=''
    LEMON_CHIFFON=''
    LIGHT_BLUE=''
    LIGHT_CORAL=''
    LIGHT_CYAN=''
    LIGHT_GOLDEN_ROD_YELLOW=''
    LIGHT_GRAY=''
    LIGHT_GREY=''
    LIGHT_GREEN=''
    LIGHT_PINK=''
    LIGHT_SALMON=''
    LIGHT_SEA_GREEN=''
    LIGHT_SKY_BLUE=''
    LIGHT_SLATE_GRAY=''
    LIGHT_SLATE_GREY=''
    LIGHT_STEEL_BLUE=''
    LIGHT_YELLOW=''
    LIME=''
    LIME_GREEN=''
    LINEN=''
    MAGENTA=''
    MAROON=''
    MEDIUM_AQUA_MARINE=''
    MEDIUM_BLUE=''
    MEDIUM_ORCHID=''
    MEDIUM_PURPLE=''
    MEDIUM_SEA_GREEN=''
    MEDIUM_SLATE_BLUE=''
    MEDIUM_SPRING_GREEN=''
    MEDIUM_TURQUOISE=''
    MEDIUM_VIOLET_RED=''
    MIDNIGHT_BLUE=''
    MINT_CREAM=''
    MISTY_ROSE=''
    MOCCASIN=''
    NAVAJO_WHITE=''
    NAVY=''
    OLD_LACE=''
    OLIVE=''
    OLIVE_DRAB=''
    ORANGE=''
    ORANGE_RED=''
    ORCHID=''
    PALE_GOLDEN_ROD=''
    PALE_GREEN=''
    PALE_TURQUOISE=''
    PALE_VIOLET_RED=''
    PAPAYA_WHIP=''
    PEACH_PUFF=''
    PERU=''
    PINK=''
    PLUM=''
    POWDER_BLUE=''
    PURPLE=''
    REBECCA_PURPLE=''
    RED=''
    ROSY_BROWN=''
    ROYAL_BLUE=''
    SADDLE_BROWN=''
    SALMON=''
    SANDY_BROWN=''
    SEA_GREEN=''
    SEA_SHELL=''
    SIENNA=''
    SILVER=''
    SKY_BLUE=''
    SLATE_BLUE=''
    SLATE_GRAY=''
    SLATE_GREY=''
    SNOW=''
    SPRING_GREEN=''
    STEEL_BLUE=''
    TAN=''
    TEAL=''
    THISTLE=''
    TOMATO=''
    TRANSPARENT=''
    TURQUOISE=''
    VIOLET=''
    WHEAT=''
    WHITE=''
    WHITE_SMOKE=''
    YELLOW=''
    YELLOW_GREEN=''


class IpgDatePickerParam:
    """
    Date Picker parameters

    Parameters
    ----------
    Label: str
        Label for the initial button
    Padding: list[float]
        Padding around the button
    SizeFactor: float
        Size of the calendar
    Show: bool
        Whether to show or not.
    """
    Label: str
    Padding: list[float]
    SizeFactor: float
    Show: bool


class IpgImageContentFit:
    """
    Content fit for the image

    Parameters
    ---------
    Contain: IpgImageContentFit.Contain
        The image will be scaled (preserving aspect ratio) so that it just fits within the window.
    Cover: IpgImageContentFit.Cover 
        Scale the image to cover all of the bounding box, cropping if needed.
    Fill: IpgImageContentFit.Fill
        Distort the image so the widget is 100% covered without cropping.
    IpgNoneIpgImageContentFit.IpgNone
        Don't resize or scale the image at all.  This is best for when you've sized the image yourself.
    ScaleDown: IpgImageContentFit.ScaleDown
        Scale the image down if it's too big for the space, but never scale it up.
    """
    Contain: str
    Cover: str
    Fill: str
    IpgNone: str
    ScaleDown: str


class IpgImageFilterMethod:
    '''
    How the image is filtered

    Parameters
    ----------
    Linear: IpgImageMethodFilter.Linear
        Bi-linear interpolation image filtering strategy.
    Nearest: IpgImageMethodFilter.Nearest
        Nearest neighbor image filtering strategy.
    '''
    Linear: str
    Nearest: str


class IpgImageRotation:
    """
    What happens to the container when image is rotated.

    Parameters
    ----------
    Floating: IpgImageRotation.Floating
        When image is rotated, it floats above the container, not distorting it.
    Solid: IpgImageRotation.Solid
        When the image is rotated, the container resizes to fit.
    """
    Floating: str
    Solid: str


class IpgImageParam:
    """
    Image parameters

    Parameters
    ----------
    Height: float
        Sets the height of the widget. 
    HeightFill: bool
        Sets the height to fill the available space, overrides height.
    ImagePath: str
        Path to where the image is.
    Opacity: float
        How much opacity, 1=opaque, 0=transparent
    Padding: list[float]
        The padding around the image.
    RotationRadians: float
        How much to rotate the image in radians.
    Show: bool
        Whether to show or hide the image.
    Width: float
        Width of the image.
    WidthFill: bool
    Whether to fill the width to the available container size.
    """
    Height: float
    HeightFill: bool
    ImagePath: str
    Opacity: float
    Padding: list[float]
    RotationRadians: float
    Show: bool
    Width: float
    WidthFill: bool


class IpgMenuParam:
    """
    Menu Bar parameters

    Parameters
    ----------
    BarHeight: float
        The height od the bar
    BarPadding: list[float]
        The padding around the bar.
    BarSpacing: float
        The space between the bar and the menu items.
    BarWidths: list[float]
        The width of each menu item in the bar.
    CheckBoundsWidth: float
        Widths of the dropdown menu.
    Show: bool
        Whether to show or hide the widget
    """
    BarHeight: float
    BarPadding: list[float]
    BarSpacing: float
    BarWidths: list[float]
    CheckBoundsWidth: float
    Show: bool


class IpgMenuType:
    """
    The type of widgets a menu item can be.  Used in item_styles parameter.
    """
    Button=''
    Checkbox=''
    Circle=''
    Dot=''
    Label=''
    Line=''
    Text=''
    Toggler=''


class IpgMenuSeparatorType:
    """
    The separator types id used.
    """
    Circle=''
    Dot=''
    Label=''
    Line=''


class IpgMousePointer:
    """
    Pointer types for the mouse interactions
    """
    Idle=''
    Pointer=''
    Grab=''
    Text=''
    Crosshair=''
    Working=''
    Grabbing=''
    ResizingHorizontally=''
    ResizingVertically=''
    NotAllowed=''
    ZoomIn=''

class IpgOpaqueParam:
    """
    Opaque update parameters.
    """
    Show: bool


class IpgPickListParam:
    """
    PickList update parameters

    Parameters
    ----------
    Options: list[str]
        Items in the picklist.
    Placeholder: str
        A placeholder in the picklist box.
    Padding: list[float]
        Padding around the picklist.
    Show: bool
        Whether to show or hide the widget.
    StyleId: str
        String id of the add_picklist_style()
    TextSize: float
        Size of the text.
    TextLineHeight: float
        Size od the text box.
    Width: float
        Width of the picklist.
    WidthFill: bool
        Whether the picklist expands the available width of the container.
    """
    Options: list[str]
    Placeholder: str
    Padding: list[float]
    Show: bool
    StyleId: str
    TextSize: float
    TextLineHeight: float
    Width: float
    WidthFill: bool


class IpgPickListHandle:
    """
    The type of handle for the picklist.
    """
    Arrow=''
    Dynamic=''
    HandleNone=''
    Static=''


class IpgProgressBarParam:
    """
    The ProgressBar update parameters.

    Parameters
    ----------
    Height: float
        Height of the bar.
    HeightFill: bool
        Whether the bar fills the height of the container.
    Min: float
        Minimum value of the bar.
    Max: float
        Maximum value of the bar.
    Show: bool
        Whether to show or hide the bar.
    StyleId: str
        The string id of the add_progress_bar_style()
    StyleStandard: str
        The standard style of the IpgStandardStyle class
    Value: float
        The value of the bar.
    Width: float
        The width of the bar.
    WidthFill: bool
        Whether the bar fills the width of the container.
    """
    Height: float
    HeightFill: bool
    Min: float
    Max: float
    Show: bool
    StyleId: str
    StyleStandard: str
    Value: float
    Width: float
    WidthFill: bool



class IpgRadioDirection:
    """
    Direction the radio button are aligned.
    """
    Horizontal=''
    Vertical=''


class IpgRadioParam:
    """
    Radio button parameters

    Parameters
    ----------
    Direction: str
        The IpgRadioDirection class
    Labels: list[str]
        The labels for each radio button
    Padding: list[float]
        The padding around the radio
    SelectedIndex: int
        The index of the radio selected
    Show: bool
        Whether to show or hide the radio group
    Size: float
        The size of the radio circle.
    Spacing: float
        The spacing between the radio buttons in the group.
    StyleId: str
        The string id of the add_radio_style().
    TextSpacing: float
        The spacing between the radio  and the label.
    TextSize=''
        The size of the label.
    LineHeightPixels: int
        The label box height in pixels.
    LineHeightRelative: float
        The label box height relative to the default.
    UserData: any
        Any user data need of any format.
    Width: float
        The width of the widget group.
    WidthFill: bool
        Whether the widget group fill the container width.
    Height: float
        The height of the widget group.
    HeightFill: bool
        Whether the widget group fill the container height.
    """
    Direction: str
    Labels: list[str]
    Padding: list[float]
    SelectedIndex: int
    Show: bool
    Size: float
    Spacing: float
    StyleId: str
    TextSpacing: float
    TextSize=''
    LineHeightPixels: int
    LineHeightRelative: float
    UserData: any
    Width: float
    WidthFill: bool
    Height: float
    HeightFill: bool


class IpgScrollableDirection:
    """
    The scroll direction of the Scrollable
    """
    Vertical=''
    Horizontal=''
    Both=''


class IpgScrollableParam:
    """
    The Scrollable parameters

    Parameters
    ----------
    Width: float
        The width of the scrollable.
    WidthFill: bool
        Whether the scrollable fills the width container.
    Height: float
        The height of the scrollable.
    HeightFill: bool
        Whether the scrollable fills the height container.
    HBarWidth: float
        The horizontal bar width
    HBarMargin: float
        The horizontal bar margin.
    HScrollerWidth: float
        The horizontal scroller width.
    HBarAlignment: IpgAlignment
        The horizontal bar alignment.
    VBarWidth: float
        The vertical bar width.
    VBarMargin: float
        The vertical margin.
    VScrollerWidth: float
        The vertical scroller width.
    VBarAlignment: IpgAlignment
        The vertical bar alignment.
    """
    Width: float
    WidthFill: bool
    Height: float
    HeightFill: bool
    HBarWidth: float
    HBarMargin: float
    HScrollerWidth: float
    HBarAlignment: IpgAlignment
    VBarWidth: float
    VBarMargin: float
    VScrollerWidth: float
    VBarAlignment: IpgAlignment


class IpgSelectableTextParam:
    """
    SelectableText parameters

    Parameters
    ----------
    Text: str
        The text
    Width: float
        The width of the widget.
    WidthFill: bool
        Whether the widget fills the container width.
    Height: float
        The height of the widget.
    HeightFill: bool
        Whether the widget fills the container height.
    HorizontalAlign: IpgHorizontalAlignment
        The horizontal alignment using the IpgHorizontalAlignment class
    VerticalAlign: IpgVerticalAlignment
        The vertical alignment using the IpgVerticalAlignment class
    LineHeight: float
        The size of the box the text.
    Size: float
        The size of the text.
    TextColor: IpgColor
        The color of the text.
    TextRgba: list[float, 4]
        The color of the text in rgba format.
    Show: bool
        Whether to show or hide the widget.
    """
    Text: str
    Width: float
    WidthFill: bool
    Height: float
    HeightFill: bool
    HorizontalAlign: IpgHorizontalAlignment
    VerticalAlign: IpgVerticalAlignment
    LineHeight: float
    Size: float
    TextColor: IpgColor
    TextRgba: list[float, 4]
    Show: bool

class IpgSliderParam:
    """
    Slider update parameters

    Parameters
    ----------
    Min: float
        The minimum range value.
    Max: float
        The maximum range value.
    Step: float
        The step of the range value.
    Value: float
        The current value.
    Width: float
        The width of the widget.
    WidthFill: bool
        Whether the width of the widget fills the container.
    Height: float
        The height of the widget.
    StyleId: str
        The string if of the add_slider_style().
    Show: bool
        Whether to show or hide the widget.
    """
    Min: float
    Max: float
    Step: float
    Value: float
    Width: float
    WidthFill: bool
    Height: float
    StyleId: str
    Show: bool


class IpgStackParam:
    """
    Stack update parameters

    Parameters
    ----------
    ShowStack: bool
        Show the top widget of the stack.
    """
    ShowStack: bool

class IpgStyleStandard:
    """
    Standard styles for widgets
    """
    Primary=''
    Success=''
    Danger=''
    Text=''


class IpgSvgParam:
    """
    SVG image parameters
    
    Parameters
    ----------
    Height: float
        The height of the widget.
    HeightFill: bool
        Whether the height of the widget fills the container.
    ImagePath: str
        The path to the image.
    Show: bool
        Whether to show or hide the widget.
    Width: float
        The width of the widget.
    WidthFill: bool
        Whether the width of the widget fills the container.
    RotationRadians: float
        How much to rotate the svg image in radians.
    Opacity: float
        The opacity of the widget.
    """
    Height: float
    HeightFill: bool
    ImagePath: str
    Show: bool
    Width: float
    WidthFill: bool
    RotationRadians: float
    Opacity: float

class IpgSvgContentFit:
    """
    How the image is sized.
    """
    Contain=''
    Cover=''
    Fill=''
    IpgNone=''
    ScaleDown=''


class IpgSvgRotation:
    """
    How the images interacts with the background during rotations.
    """
    Floating=''
    Solid=''


class IpgTableParam:
    """
    Table parameters

    Parameters
    ----------
    Title: str
        Title for the table.
    Data: list[dict]
        Table data in list of dictionaries form
    Width: float
        Width of the table.
    Height: float
        Height of the table.
    RowHighlight: IpgTableRowHighLight
        Sets the color type for highlighting alternate rows.
    HighlightAmount: float
        The highlighting amount.
    ColumnWidths: list[float]
        A list of column widths.
    ModalShow: bool
        Whether to show or hide the modal.
    Show: bool
        Whether to show or hide the widget.
    """
    Title: str
    Data: dict
    Width: float
    Height: float
    RowHighlight: IpgTableRowHighLight
    HighlightAmount: float
    ColumnWidths: list[float]
    ModalShow: bool
    Show: bool


class IpgTableRowHighLight:
    """
    How the table highlighting is applied.
    """
    Darker=''
    Lighter=''


class IpgTableWidget:
    """
    The type of widget to use in the table row, if needed.
    """
    Button=''
    Checkbox=''
    Modal=''
    Toggler=''


class IpgTextInputParam:
    """
    TextInput parameters

    Parameters
    ----------
    Placeholder: str
        The text in the box for instructions.
    Value: str
        The value typed in or pasted in the box
    IsSecure: bool
        Whether to display the text in a readable format or not.
    Width: float
        The width of the widget.
    Padding: list[float]
        The padding around the widget.
    Size: float
        The text ize.
    LineHeightPixels: float
        The height of the text box in pixels.
    LineHeightRelative: float
        The height of the text box relative to the default size.
    StyleId: str
        The string id of add_textinput_style().
    """
    Placeholder: str
    Value: str
    IsSecure: bool
    Width: float
    Padding: list[float]
    Size: float
    LineHeightPixels: float
    LineHeightRelative: float
    StyleId: str


class IpgTextParam:
    """
    Text parameters

    Parameters
    ----------
    Content: str
        The text.
    Height: float
        The height of the widget.
    HeightFill: bool
        Whether to fill the height of the container with the widget.
    HorizontalAlignment: IpgHorizontalAlignment
        The alignment of the text in the text box.
    LineHeight: float
        The height of the text box.
    Size: float
        The size of the text.
    TextColor: IpgColor
        The color of the text.
    TextRgba: list[float]
        The color of the text in rgba format.
    VerticalAlignment: IpgVerticalAlignment
        The alignment of the text in the text box.
    Width: float
        The width of the widget.
    WidthFill: bool
        Whether to fill the width of the container with the widget.
    Show: bool
        Whether to show or hide the widget.
    """
    Content: str
    Height: float
    HeightFill: bool
    HorizontalAlignment: IpgHorizontalAlignment
    LineHeight: float
    Size: float
    TextColor: IpgColor
    TextRgba: list[float]
    VerticalAlignment: IpgVerticalAlignment
    Width: float
    WidthFill: bool
    Show: bool


class IpgTogglerParam:
    """
    Toggler parameters

    Parameters
    ----------
    Alignment: IpgAlignment
        Align widget using IpgAlignment
    Label: str
        String label for widget.
    LineHeight: float
        The height of the text box for the widget.
    Show: bool
        Whether to show or hide the widget.
    Size: float
        The size of the toggler.
    TextSize: float
        The text size of the label.
    Width: float
        The width of the widget.
    WidthFill: bool
        Whether the width fills the container.
    """
    Alignment: IpgAlignment
    Label: str
    LineHeight: float
    Show: bool
    Size: float
    TextSize: float
    Width: float
    WidthFill: bool


class IpgWindowParam:
    '''
    Parameters
    ----------
    Debug: bool=False
        If true draws a frame around all widgets.
    Decorations: int=0
        The int is the windows id, toggles whether the window has a frame and header
    Level: IpgWindowLevel=IpgWindowLevel.Normal
        The window stacking behavior: Normal, AlwaysOnBottom, AlwaysOnTop.
    Mode: IpgWindowMode=IpgWindowMode.Windowed
        How the window appears, windowed, hidden, or full screen.
    Position: tuple[int, float, float]
        Position of the window, (window_id, pos_x, pos_y).
    Theme: IpgWindowTheme=IpgWindowTheme.Dark
        Window theme.
    ScaleFactor: float=1.0
        Window scale factor
    '''
    Debug: bool=False
    Decorations: int=0
    Level: tuple[id, IpgWindowLevel]=[0, IpgWindowLevel.Normal]
    Mode: IpgWindowMode=IpgWindowMode.Windowed
    Position: tuple[int, float, float]=[0.0]
    Size: tuple[int, float, float]=[0.0]
    Theme: IpgWindowTheme=IpgWindowTheme.Dark
    ScaleFactor: float=1.0
    


class IpgWindowLevel:
    """
    The stacking order of the windows
    """
    Normal=''
    AlwaysOnBottom=''
    AlwaysOnTop=''


class IpgWindowMode:
    """
    Determine the window mode

    Parameters
    ----------
    Closed
        Window is hidden and can be reopened with a callback
    FullScreen
        Window is full screen, ensure you have a way of returning it to windowed
    Windowed (default)
        Window is not full screen and can be moved, etc.
    """
    Closed=''
    FullScreen=''
    Windowed=''
    

class IpgWindowTheme:
    """
    Window themes
    """
    Dark=''
    Light=''
    CatppuccinLatte=''
    CatppuccinFrappe=''
    CatppuccinMacchiato=''
    CatppuccinMocha=''
    Dracula=''
    Ferra=''
    GruvboxLight=''
    GruvboxDark=''
    KanagawaWave=''
    KanagawaDragon=''
    KanagawaLotus=''
    Moonfly=''
    Nightfly=''
    Nord=''
    Oxocarbon=''
    SolarizedLight=''
    SolarizedDark=''
    TokyoNight=''
    TokyoNightStorm=''
    TokyoNightLight=''


class IpgButtonArrow:
    """
    The various arrow for a button
    """
    ArrowBarLeft=''
    ArrowBarRight=''
    ArrowBarUp=''
    ArrowClockwise=''
    ArrowCounterclockwise=''
    ArrowDown=''
    ArrowDownCircle=''
    ArrowDownCircleFill=''
    ArrowDownLeft=''
    ArrowDownLeftCircle=''
    ArrowDownLeftCircleFill=''
    ArrowDownLeftSquare=''
    ArrowDownLeftSquareFill=''
    ArrowDownRight=''
    ArrowDownRightCircle=''
    ArrowDownRightCircleFill=''
    ArrowDownRightSquare=''
    ArrowDownRightSquareFill=''
    ArrowDownShort=''
    ArrowDownSquare=''
    ArrowDownSquareFill=''
    ArrowDownUp=''
    ArrowLeft=''
    ArrowLeftCircle=''
    ArrowLeftCircleFill=''
    ArrowLeftRight=''
    ArrowLeftShort=''
    ArrowLeftSquare=''
    ArrowLeftSquareFill=''
    ArrowNinezerodegDown=''
    ArrowNinezerodegLeft=''
    ArrowNinezerodegRight=''
    ArrowNinezerodegUp=''
    ArrowRepeat=''
    ArrowReturnLeft=''
    ArrowReturnRight=''
    ArrowRight=''
    ArrowRightCircle=''
    ArrowRightCircleFill=''
    ArrowRightShort=''
    ArrowRightSquare=''
    ArrowRightSquareFill=''
    ArrowThroughHeart=''
    ArrowThroughHeartFill=''
    ArrowUp=''
    ArrowUpCircle=''
    ArrowUpCircleFill=''
    ArrowUpLeft=''
    ArrowUpLeftCircle=''
    ArrowUpLeftCircleFill=''
    ArrowUpLeftSquare=''
    ArrowUpLeftSquareFill=''
    ArrowUpRight=''
    ArrowUpRightCircle=''
    ArrowUpRightCircleFill=''
    ArrowUpRightSquare=''
    ArrowUpRightSquareFill=''
    ArrowUpShort=''
    ArrowUpSquare=''
    ArrowUpSquareFill=''
    Arrows=''
    ArrowsAngleContract=''
    ArrowsAngleExpand=''
    ArrowsCollapse=''
    ArrowsCollapseVertical=''
    ArrowsExpand=''
    ArrowsExpandVertical=''
    ArrowsFullscreen=''
    ArrowsMove=''
    ArrowsVertical=''
 # type: ignore